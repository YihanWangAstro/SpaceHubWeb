<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="struct_space_h_1_1_lazy_1_1_expr" kind="struct" language="C++" prot="public">
    <compoundname>SpaceH::Lazy::Expr</compoundname>
    <includes refid="lazy__expr_8h" local="no">lazy_expr.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Derived</declname>
        <defname>Derived</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_expr_1ada9ca100b1aa730e95c0ee6bf802d340" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Derived &amp;</type>
        <definition>const Derived&amp; SpaceH::Lazy::Expr&lt; Derived &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/yihan/Repositories/SpaceHub/src/lazy-evaluation/lazy_expr.h" line="14" column="1" bodyfile="/home/yihan/Repositories/SpaceHub/src/lazy-evaluation/lazy_expr.h" bodystart="14" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="97">
        <label>SpaceH::Lazy::Expr&lt; Binary_Expr&lt; Operator, Lhs, Rhs &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="94" relation="template-instance">
          <edgelabel>&lt; Binary_Expr&lt; Operator, Lhs, Rhs &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>SpaceH::Lazy::Expr&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="94" relation="template-instance">
          <edgelabel>&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>SpaceH::Lazy::Unary_Expr&lt; Operator, Unary &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_unary___expr"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="104">
        <label>SpaceH::Lazy::Larray&lt; T, Len, true &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_larray_3_01_t_00_01_len_00_01true_01_4"/>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_slice___expr"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>SpaceH::Lazy::Expr&lt; Derived &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
      </node>
      <node id="95">
        <label>SpaceH::Lazy::Expr&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="94" relation="template-instance">
          <edgelabel>&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>SpaceH::Lazy::Expr&lt; Larray&lt; T, Len, true &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="94" relation="template-instance">
          <edgelabel>&lt; Larray&lt; T, Len, true &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>SpaceH::Lazy::Expr&lt; Unary_Expr&lt; Operator, Unary &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="94" relation="template-instance">
          <edgelabel>&lt; Unary_Expr&lt; Operator, Unary &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>SpaceH::Lazy::Binary_Expr&lt; Operator, Lhs, Rhs &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_binary___expr"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_larray"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="105">
        <label>SpaceH::Lazy::Expr&lt; Derived &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
      </node>
    </collaborationgraph>
    <location file="/home/yihan/Repositories/SpaceHub/src/lazy-evaluation/lazy_expr.h" line="13" column="1" bodyfile="/home/yihan/Repositories/SpaceHub/src/lazy-evaluation/lazy_expr.h" bodystart="13" bodyend="15"/>
    <listofallmembers>
      <member refid="struct_space_h_1_1_lazy_1_1_expr_1ada9ca100b1aa730e95c0ee6bf802d340" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Expr</scope><name>cast</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
