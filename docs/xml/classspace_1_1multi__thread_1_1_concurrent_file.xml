<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classspace_1_1multi__thread_1_1_concurrent_file" kind="class" language="C++" prot="public">
    <compoundname>space::multi_thread::ConcurrentFile</compoundname>
    <includes refid="multi-thread_8hpp" local="no">multi-thread.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classspace_1_1multi__thread_1_1_concurrent_file_1ac1ceb28fcb8ddb8b5d58d81a1668762a" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::fstream &gt;</type>
        <definition>std::shared_ptr&lt;std::fstream&gt; space::multi_thread::ConcurrentFile::file_</definition>
        <argsstring></argsstring>
        <name>file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="128" column="19" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspace_1_1multi__thread_1_1_concurrent_file_1a258fbfe4acc5540c7e59b95056e40429" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::mutex &gt;</type>
        <definition>std::shared_ptr&lt;std::mutex&gt; space::multi_thread::ConcurrentFile::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="129" column="19" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classspace_1_1multi__thread_1_1_concurrent_file_1ab1438900a6d036fb83b4392b5717bdc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::multi_thread::ConcurrentFile::ConcurrentFile</definition>
        <argsstring>(const char *file_name, std::ios_base::openmode mode)</argsstring>
        <name>ConcurrentFile</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="111" column="10" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi__thread_1_1_concurrent_file_1abc63d4857e583eee1fead39acf452459" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::multi_thread::ConcurrentFile::ConcurrentFile</definition>
        <argsstring>(const std::string &amp;file_name, std::ios_base::openmode mode)</argsstring>
        <name>ConcurrentFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="112" column="10" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="139" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi__thread_1_1_concurrent_file_1a18777c4405a7f009485df2c717bd0929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callback</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::multi_thread::ConcurrentFile::execute</definition>
        <argsstring>(Callback &amp;&amp;func, Args &amp;&amp;... args)</argsstring>
        <name>execute</name>
        <param>
          <type>Callback &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="115" column="8" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi__thread_1_1_concurrent_file_1a18c096379983327e65991a9c47e25696" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void space::multi_thread::ConcurrentFile::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="117" column="15" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi__thread_1_1_concurrent_file_1af0b787fb4623bdeee373b9fdea4262cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool space::multi_thread::ConcurrentFile::eof</definition>
        <argsstring>()</argsstring>
        <name>eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="119" column="15" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classspace_1_1multi__thread_1_1_concurrent_file_1a4ff8182dffe89350438ef9aedc33ade0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classspace_1_1multi__thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref> &amp;</type>
        <definition>ConcurrentFile&amp; operator&lt;&lt;</definition>
        <argsstring>(ConcurrentFile &amp;os, U &amp;&amp;tup)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classspace_1_1multi__thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="122" column="10" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="friend" id="classspace_1_1multi__thread_1_1_concurrent_file_1a989ac6f685c3d26fb0e66c800d194644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;&gt;</definition>
        <argsstring>(ConcurrentFile &amp;is, U &amp;tup)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classspace_1_1multi__thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>U &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/multi-thread/multi-thread.hpp" line="125" column="15" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="166" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>space::multi_thread::ConcurrentFile</label>
        <link refid="classspace_1_1multi__thread_1_1_concurrent_file"/>
      </node>
    </collaborationgraph>
    <location file="src/multi-thread/multi-thread.hpp" line="109" column="21" bodyfile="src/multi-thread/multi-thread.hpp" bodystart="109" bodyend="130"/>
    <listofallmembers>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1ab1438900a6d036fb83b4392b5717bdc9" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>ConcurrentFile</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1abc63d4857e583eee1fead39acf452459" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>ConcurrentFile</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1af0b787fb4623bdeee373b9fdea4262cb" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>eof</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1a18777c4405a7f009485df2c717bd0929" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>execute</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1ac1ceb28fcb8ddb8b5d58d81a1668762a" prot="private" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>file_</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1a18c096379983327e65991a9c47e25696" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>flush</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1a258fbfe4acc5540c7e59b95056e40429" prot="private" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>mutex_</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1a4ff8182dffe89350438ef9aedc33ade0" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>operator&lt;&lt;</name></member>
      <member refid="classspace_1_1multi__thread_1_1_concurrent_file_1a989ac6f685c3d26fb0e66c800d194644" prot="public" virt="non-virtual"><scope>space::multi_thread::ConcurrentFile</scope><name>operator&gt;&gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
