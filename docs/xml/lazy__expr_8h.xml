<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="lazy__expr_8h" kind="file" language="C++">
    <compoundname>lazy_expr.h</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="dev-tools_8hpp" local="yes">../dev-tools.hpp</includes>
    <includedby refid="lazy__array_8h" local="yes">src/lazy-evaluation/lazy_array.h</includedby>
    <includedby refid="slice_8h" local="yes">src/lazy-evaluation/slice.h</includedby>
    <includedby refid="mkl-array_8h" local="yes">src/lazy-evaluation/mkl-array.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>IO.hpp</label>
        <link refid="_i_o_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>../dev-tools.hpp</label>
        <link refid="dev-tools_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/lazy-evaluation/lazy_expr.h</label>
        <link refid="lazy__expr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>array</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/lazy-evaluation/mkl-array.h</label>
        <link refid="mkl-array_8h"/>
      </node>
      <node id="3">
        <label>src/lazy-evaluation/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/lazy-evaluation/lazy_array.h</label>
        <link refid="lazy__array_8h"/>
      </node>
      <node id="1">
        <label>src/lazy-evaluation/lazy_expr.h</label>
        <link refid="lazy__expr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_space_h_1_1_lazy_1_1_expr" prot="public">SpaceH::Lazy::Expr</innerclass>
    <innerclass refid="struct_space_h_1_1_lazy_1_1_unary___expr" prot="public">SpaceH::Lazy::Unary_Expr</innerclass>
    <innerclass refid="struct_space_h_1_1_lazy_1_1_binary___expr" prot="public">SpaceH::Lazy::Binary_Expr</innerclass>
    <innernamespace refid="namespace_space_h">SpaceH</innernamespace>
    <innernamespace refid="namespace_space_h_1_1_lazy">SpaceH::Lazy</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="lazy__expr_8h_1ae6a36060593a9dee5c7ed2f2853a053e" prot="public" static="no">
        <name>IS_EXPR</name>
        <param><defname>TYPE</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1a8a3f3c65b4167fb7188576cfa5e2ca44" kindref="member">IS_BASE_OF</ref>(Expr&lt;TYPE&gt;, TYPE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_expr.h" line="10" column="9" bodyfile="src/lazy-evaluation/lazy_expr.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lazy__expr_8h_1afc22057c6ded0f3a22b19d2e084687b6" prot="public" static="no">
        <name>EXPR_CREATE_UNARY_OPERATION</name>
        <param><defname>FUNC</defname></param>
        <param><defname>EXPR</defname></param>
        <initializer>auto <ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP) = [](const auto &amp;unary) -&gt; decltype(<ref refid="dev-tools_8hpp_1a3102a3792f55f3ad5ff10f5fe3a6ce79" kindref="member">EXPR</ref>) { return (<ref refid="dev-tools_8hpp_1a3102a3792f55f3ad5ff10f5fe3a6ce79" kindref="member">EXPR</ref>); };             \
                                                                                          \
  template &lt;typename Unary&gt;                                                               \
  inline constexpr Unary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Unary&gt; FUNC(const Expr&lt;Unary&gt; &amp;unary) { \
    return Unary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Unary&gt;(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP), unary.cast());                 \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_expr.h" line="59" column="9" bodyfile="src/lazy-evaluation/lazy_expr.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lazy__expr_8h_1aaaa4886316abb057c851c7281a73c4e3" prot="public" static="no">
        <name>EXPR_FILTER</name>
        <param><defname>TYPE</defname></param>
        <param><defname>...</defname></param>
        <initializer>typename std::enable_if_t&lt;!<ref refid="lazy__expr_8h_1ae6a36060593a9dee5c7ed2f2853a053e" kindref="member">IS_EXPR</ref>(TYPE), ##__VA_ARGS__&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_expr.h" line="67" column="9" bodyfile="src/lazy-evaluation/lazy_expr.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lazy__expr_8h_1a95072850b37b9d9f310b26f9601627cf" prot="public" static="no">
        <name>EXPR_CREATE_BINARY_OPERATION</name>
        <param><defname>FUNC</defname></param>
        <param><defname>EXPR</defname></param>
        <initializer>auto <ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP) = [](const auto &amp;lhs, const auto &amp;rhs) -&gt; decltype(<ref refid="dev-tools_8hpp_1a3102a3792f55f3ad5ff10f5fe3a6ce79" kindref="member">EXPR</ref>) { return (<ref refid="dev-tools_8hpp_1a3102a3792f55f3ad5ff10f5fe3a6ce79" kindref="member">EXPR</ref>); };                    \
                                                                                                                \
  template &lt;typename Lhs, typename Rhs&gt;                                                                         \
  inline constexpr <ref refid="lazy__expr_8h_1aaaa4886316abb057c851c7281a73c4e3" kindref="member">EXPR_FILTER</ref>(Lhs, Binary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Lhs, Rhs&gt;)                                  \
      FUNC(const Lhs &amp;lhs, const Expr&lt;Rhs&gt; &amp;rhs) {                                                              \
    return Binary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Lhs, Rhs&gt;(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP), lhs, rhs.cast());                                \
  }                                                                                                             \
                                                                                                                \
  template &lt;typename Lhs, typename Rhs&gt;                                                                         \
  inline constexpr <ref refid="lazy__expr_8h_1aaaa4886316abb057c851c7281a73c4e3" kindref="member">EXPR_FILTER</ref>(Rhs, Binary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Lhs, Rhs&gt;)                                  \
      FUNC(const Expr&lt;Lhs&gt; &amp;lhs, const Rhs &amp;rhs) {                                                              \
    return Binary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Lhs, Rhs&gt;(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP), lhs.cast(), rhs);                                \
  }                                                                                                             \
                                                                                                                \
  template &lt;typename Lhs, typename Rhs&gt;                                                                         \
  inline constexpr Binary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Lhs, Rhs&gt; FUNC(const Expr&lt;Lhs&gt; &amp;lhs, const Expr&lt;Rhs&gt; &amp;rhs) { \
    return Binary_Expr&lt;decltype(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP)), Lhs, Rhs&gt;(<ref refid="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" kindref="member">UNIQ</ref>(OP), lhs.cast(), rhs.cast());                         \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_expr.h" line="69" column="9" bodyfile="src/lazy-evaluation/lazy_expr.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/lazy-evaluation/lazy_expr.h"/>
  </compounddef>
</doxygen>
