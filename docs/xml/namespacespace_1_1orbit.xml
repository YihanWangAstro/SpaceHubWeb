<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespacespace_1_1orbit" kind="namespace" language="C++">
    <compoundname>space::orbit</compoundname>
    <innerclass refid="structspace_1_1orbit_1_1_ellip_orbit" prot="public">space::orbit::EllipOrbit</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__mass" prot="public">space::orbit::has_mass</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__mass_3_01_____t_00_01typename_01std_1_1enable__if_3_01_9std_1_1is__4c60cfef8caede5d6d5d189d21f574b4" prot="public">space::orbit::has_mass&lt; __T, typename std::enable_if&lt; !std::is_same&lt; decltype(std::declval&lt; __T &gt;(). mass), void &gt;::value, bool &gt;::type &gt;</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__pos" prot="public">space::orbit::has_pos</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__pos_3_01_____t_00_01typename_01std_1_1enable__if_3_01_9std_1_1is__sefb893918cc539add71052bde1ef149e" prot="public">space::orbit::has_pos&lt; __T, typename std::enable_if&lt; !std::is_same&lt; decltype(std::declval&lt; __T &gt;(). pos), void &gt;::value, bool &gt;::type &gt;</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__radius" prot="public">space::orbit::has_radius</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__radius_3_01_____t_00_01typename_01std_1_1enable__if_3_01_9std_1_1is1bba305d1e0f1813c9cb26256d6aff6b" prot="public">space::orbit::has_radius&lt; __T, typename std::enable_if&lt; !std::is_same&lt; decltype(std::declval&lt; __T &gt;(). radius), void &gt;::value, bool &gt;::type &gt;</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__vel" prot="public">space::orbit::has_vel</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1has__vel_3_01_____t_00_01typename_01std_1_1enable__if_3_01_9std_1_1is__s8dfe958a08974f9ee63ceff9031ab806" prot="public">space::orbit::has_vel&lt; __T, typename std::enable_if&lt; !std::is_same&lt; decltype(std::declval&lt; __T &gt;(). vel), void &gt;::value, bool &gt;::type &gt;</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1_hyper_orbit" prot="public">space::orbit::HyperOrbit</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1_kepler_orbit" prot="public">space::orbit::KeplerOrbit</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1_random_indicator" prot="public">space::orbit::RandomIndicator</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5" prot="public" static="no" strong="yes">
        <type></type>
        <name>OrbitType</name>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5a119518c2134c46108179369f0ce81fa2" prot="public">
          <name>Ellipse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5adf5a05bb403aa376bd71f1341f8acfa6" prot="public">
          <name>Parabola</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5a2af03ca39974cae19a90cdad5a5f3230" prot="public">
          <name>Hyperbola</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum of kepler orbit type. Possible value: Ellipse, Parabola, Hyperbola, None. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="47" column="21" bodyfile="src/orbits/orbits.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="namespacespace_1_1orbit_1a6d5f1fbb31b8dcdf0aa2ae8f83dfc5a1" prot="public" static="no" strong="yes">
        <type></type>
        <name>Hyper</name>
        <enumvalue id="namespacespace_1_1orbit_1a6d5f1fbb31b8dcdf0aa2ae8f83dfc5a1a13b5bfe96f3e2fe411c9f66f4a582adf" prot="public">
          <name>in</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a6d5f1fbb31b8dcdf0aa2ae8f83dfc5a1ac68271a63ddbc431c307beb7d2918275" prot="public">
          <name>out</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum type that indicates the trajectory is hyperbolically incident in or hyperbolically eject out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="172" column="17" bodyfile="src/orbits/orbits.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacespace_1_1orbit_1aa6519650f1ef6058c7996a2d74762577" prot="public" static="no">
        <type><ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; double &gt;</type>
        <definition>using space::orbit::Kepler = typedef KeplerOrbit&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Kepler</name>
        <briefdescription>
<para>Alias of OrbitArgs&lt;double&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="164" column="1" bodyfile="src/orbits/orbits.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacespace_1_1orbit_1aed359d482e51883a181da73f6efa5013" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structspace_1_1orbit_1_1_random_indicator" kindref="compound">space::orbit::RandomIndicator</ref></type>
        <definition>struct space::orbit::RandomIndicator  space::orbit::isotherm</definition>
        <argsstring></argsstring>
        <name>isotherm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="53" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacespace_1_1orbit_1a5e97a93d48049cbc0c44079083da7222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::myacos</definition>
        <argsstring>(Scalar x)</argsstring>
        <name>myacos</name>
        <param>
          <type>Scalar</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="251" column="8" bodyfile="src/orbits/orbits.hpp" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1afe2f5846e68cbd436925e553686533ff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto space::orbit::semi_latus_rectum</definition>
        <argsstring>(Scalar a, Scalar e)</argsstring>
        <name>semi_latus_rectum</name>
        <param>
          <type>Scalar</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="256" column="16" bodyfile="src/orbits/orbits.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a95676ada3e97610dea9a0260651ba437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::euler_rotate</definition>
        <argsstring>(Vector &amp;v, const Scalar phi, const Scalar theta, const Scalar psi)</argsstring>
        <name>euler_rotate</name>
        <param>
          <type>Vector &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>psi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="261" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="261" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a8ef2c00e2bb99f648553dade399dd1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::E_anomaly_to_T_anomaly</definition>
        <argsstring>(Scalar E_anomaly, Scalar e)</argsstring>
        <name>E_anomaly_to_T_anomaly</name>
        <param>
          <type>Scalar</type>
          <declname>E_anomaly</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="281" column="8" bodyfile="src/orbits/orbits.hpp" bodystart="281" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a37bec1328992111f2647fcf5fe667260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::M_anomaly_to_E_anomaly</definition>
        <argsstring>(Scalar mean_anomaly, Scalar e)</argsstring>
        <name>M_anomaly_to_E_anomaly</name>
        <param>
          <type>Scalar</type>
          <declname>mean_anomaly</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="294" column="8" bodyfile="src/orbits/orbits.hpp" bodystart="294" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a61a80214b377e8a424441c73ec251558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::T_anomaly_to_E_anomaly</definition>
        <argsstring>(Scalar T_anomaly, Scalar e)</argsstring>
        <name>T_anomaly_to_E_anomaly</name>
        <param>
          <type>Scalar</type>
          <declname>T_anomaly</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="315" column="8" bodyfile="src/orbits/orbits.hpp" bodystart="315" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a7e91be3bf07a512d6e03dd42b55ff177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::E_anomaly_to_M_anomaly</definition>
        <argsstring>(Scalar E_anomaly, Scalar e)</argsstring>
        <name>E_anomaly_to_M_anomaly</name>
        <param>
          <type>Scalar</type>
          <declname>E_anomaly</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="330" column="8" bodyfile="src/orbits/orbits.hpp" bodystart="330" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ac639ca4751557b8a5dd59e452344fdc4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5" kindref="member">OrbitType</ref></type>
        <definition>constexpr OrbitType space::orbit::classify_orbit</definition>
        <argsstring>(T eccentricity)</argsstring>
        <name>classify_orbit</name>
        <param>
          <type>T</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="343" column="21" bodyfile="src/orbits/orbits.hpp" bodystart="343" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a4184496dc0934f5365a00fc5c6438d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::orbit_to_coord</definition>
        <argsstring>(const KeplerOrbit&lt; Scalar &gt; &amp;args, Vector &amp;pos, Vector &amp;vel)</argsstring>
        <name>orbit_to_coord</name>
        <param>
          <type>const <ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; Scalar &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>vel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="460" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="460" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1af5ab176b14b301e161efe4f5f519914a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::coord_to_orbit</definition>
        <argsstring>(Scalar m1, Scalar m2, const Vector &amp;dr, const Vector &amp;dv, KeplerOrbit&lt; Scalar &gt; &amp;args)</argsstring>
        <name>coord_to_orbit</name>
        <param>
          <type>Scalar</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>dv</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; Scalar &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="477" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="477" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1add1ade24d81a2e820776c4d1076f0886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::orbit_to_coord</definition>
        <argsstring>(KeplerOrbit&lt; Scalar &gt; const &amp;args)</argsstring>
        <name>orbit_to_coord</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; Scalar &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="525" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="525" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1af559e3bfe01ebd1ea5b0b7cf91d9a1b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_eccentricity</definition>
        <argsstring>(Scalar u, Vector const &amp;dr, Vector const &amp;dv)</argsstring>
        <name>calc_eccentricity</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="546" column="15" bodyfile="src/orbits/orbits.hpp" bodystart="546" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a4e547b3a0a6d5133eb38c6548172c867" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_eccentricity</definition>
        <argsstring>(Scalar u, Scalar dx, Scalar dy, Scalar dz, Scalar dvx, Scalar dvy, Scalar dvz)</argsstring>
        <name>calc_eccentricity</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="551" column="13" bodyfile="src/orbits/orbits.hpp" bodystart="551" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ac766a365db0f96da95764a569ca27810" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_semi_major_axis</definition>
        <argsstring>(Scalar u, Vector const &amp;dr, Vector const &amp;dv)</argsstring>
        <name>calc_semi_major_axis</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="557" column="15" bodyfile="src/orbits/orbits.hpp" bodystart="557" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a1b58851ecb7a98faaaef30f809b08362" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_semi_major_axis</definition>
        <argsstring>(Scalar u, Scalar dx, Scalar dy, Scalar dz, Scalar dvx, Scalar dvy, Scalar dvz)</argsstring>
        <name>calc_semi_major_axis</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="563" column="15" bodyfile="src/orbits/orbits.hpp" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1adb8a9f565c97cb198ec36ae657b9efe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_a_e</definition>
        <argsstring>(Scalar u, Vector const &amp;dr, Vector const &amp;dv)</argsstring>
        <name>calc_a_e</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="569" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="569" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab429eb4e43b25ce8ad7bd0b53d502ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_a_e</definition>
        <argsstring>(Scalar u, Scalar dx, Scalar dy, Scalar dz, Scalar dvx, Scalar dvy, Scalar dvz)</argsstring>
        <name>calc_a_e</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="581" column="13" bodyfile="src/orbits/orbits.hpp" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1af915bfd8389f1cdd65a450ea91312a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::period</definition>
        <argsstring>(Scalar m1, Scalar m2, Scalar a)</argsstring>
        <name>period</name>
        <param>
          <type>Scalar</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="587" column="13" bodyfile="src/orbits/orbits.hpp" bodystart="587" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ae86668ddeeacfc3cd845e59131489bdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::period</definition>
        <argsstring>(KeplerOrbit&lt; Scalar &gt; const &amp;args)</argsstring>
        <name>period</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; Scalar &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="596" column="13" bodyfile="src/orbits/orbits.hpp" bodystart="596" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1afc818fe269b48ed49370c7c3bf8680d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::time_to_periapsis</definition>
        <argsstring>(OrbitType obt_type, Scalar u, Scalar a, Scalar M_anomaly)</argsstring>
        <name>time_to_periapsis</name>
        <param>
          <type><ref refid="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5" kindref="member">OrbitType</ref></type>
          <declname>obt_type</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>M_anomaly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="601" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="601" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a29f8ccd596edbab0d97b792b78d72c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::time_to_periapsis</definition>
        <argsstring>(KeplerOrbit&lt; Scalar &gt; const &amp;args)</argsstring>
        <name>time_to_periapsis</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; Scalar &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="612" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="612" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a4ad9afff57ba33ed6d4382b986ac406f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_factor</definition>
        <argsstring>(Scalar r, Scalar m_tot1, Scalar m_tot2, Scalar R1, Scalar R2)</argsstring>
        <name>tidal_factor</name>
        <param>
          <type>Scalar</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m_tot1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m_tot2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="627" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="627" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab2b432c8daf47419d955c5fec22da83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_radius</definition>
        <argsstring>(Scalar tidal_factor, Scalar m_tot1, Scalar m_tot2, Scalar R2)</argsstring>
        <name>tidal_radius</name>
        <param>
          <type>Scalar</type>
          <declname>tidal_factor</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m_tot1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m_tot2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="635" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="635" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a3e93ceb25d707bacad7dcfd57fb54f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_radius</definition>
        <argsstring>(Scalar tidal_factor, Scalar m1, Scalar m2, Scalar R1, Scalar R2)</argsstring>
        <name>tidal_radius</name>
        <param>
          <type>Scalar</type>
          <declname>tidal_factor</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="640" column="6" bodyfile="src/orbits/orbits.hpp" bodystart="640" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a1b5f49246a5fcbe95273097552d9aa5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::cluster</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... ptcs)</argsstring>
        <name>cluster</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Create a std::ranges like(Container) from individual particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspace_1_1_types" kindref="compound">Types</ref> of particle, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest if exits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The containers contains input particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="48" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a17a63864154eabd2391d7c1b3aa18a22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::M_tot</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>M_tot</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the total mass of a cluster of particles/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The total mass of the particle cluster/single particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="62" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a989f2b9870a8ca2690ba4136ef208cda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::M_tot</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... args)</argsstring>
        <name>M_tot</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calculate the total mass of particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The total mass of particles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="87" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a99902b1d7bb3ac1c001bda82a3293ac4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::COM_p</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>COM_p</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the centre of mass position of a particle cluster/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The centre of mass position of the particle cluster/single particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="101" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="101" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a3fcdfe4eea53e1c26976a5b6069b2ae6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::COM_p</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... ptcs)</argsstring>
        <name>COM_p</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Calculate the centre of mass position of particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The centre of mass position of particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="134" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a0e27a26d9d86be65351198b5e416317d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::COM_v</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>COM_v</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the centre of mass velocity of a particle cluster/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The centre of mass velocity of the particle cluster/single particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="150" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="150" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ae0dec731f884bdc01bbfed5ef8ffe0b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::COM_v</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... ptcs)</argsstring>
        <name>COM_v</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Calculate the centre of mass velocity of particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The centre of mass velocity of particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="185" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="185" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1adde7c0ed536ab504522c5a61cfd1488c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::M_rdc</definition>
        <argsstring>(Cluster1 const &amp;m1, Cluster2 const &amp;m2)</argsstring>
        <name>M_rdc</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>The reduced mass of two clusters(cluster can also be a single particle). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">m2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/second single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The reduced mass of the two clusters(cluster can also be a single particle). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="205" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a9ce15ee351be8dcc5b55294381b24d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles_pos</definition>
        <argsstring>(Vector const &amp;centre_mass_pos, Cluster &amp;ptc)</argsstring>
        <name>move_particles_pos</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_pos</declname>
        </param>
        <param>
          <type>Cluster &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass position of a cluster(can be a single particle) to a specific position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>3-D Vector type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>The cluster(can be a single particle) needs to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="221" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="221" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab8569a777096528c38d237ef5be18f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles_pos</definition>
        <argsstring>(Vector const &amp;centre_mass_pos, Particle &amp;ptc1, Particle &amp;ptc2, Args &amp;... ptcs)</argsstring>
        <name>move_particles_pos</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_pos</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass position of particles to a specific position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>3-D Vector type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles need to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="244" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a02faa6ac98764495a3fadfd8812d6d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles_vel</definition>
        <argsstring>(Vector const &amp;centre_mass_vel, Cluster &amp;ptc)</argsstring>
        <name>move_particles_vel</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_vel</declname>
        </param>
        <param>
          <type>Cluster &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass velocity of a cluster(can be a single particle) to a specific velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>3-D Vector type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>The cluster(can be a single particle) needs to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="261" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="261" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1aa83cc010dbe9d7ddfaea70a60967c66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles_vel</definition>
        <argsstring>(Vector const &amp;centre_mass_vel, Particle &amp;ptc1, Particle &amp;ptc2, Args &amp;... ptcs)</argsstring>
        <name>move_particles_vel</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_vel</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass velocity of particles to a specific velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>3-D Vector type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles need to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="284" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="284" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a7e2e611df033fb699f00e4d145a5b40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles</definition>
        <argsstring>(Vector const &amp;centre_mass_pos, Vector const &amp;centre_mass_vel, Cluster &amp;ptc)</argsstring>
        <name>move_particles</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_pos</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_vel</declname>
        </param>
        <param>
          <type>Cluster &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass position and velocity of a cluster(can be a single particle) to a specific position and velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>3-D Vector type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass velocity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>The cluster(can be a single particle) needs to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="303" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="303" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a1e583d6280df092ac09a767bda6591d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles</definition>
        <argsstring>(Vector const &amp;centre_mass_pos, Vector const &amp;centre_mass_vel, Particle &amp;ptc1, Particle &amp;ptc2, Args &amp;... ptcs)</argsstring>
        <name>move_particles</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_pos</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_vel</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass position and velocity of particles to a specific position and velocity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector 3-D Vector type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">centre_mass_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The target centre of mass velocity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles need to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="330" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="330" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a9e84522272046c450b1e67a2e2906876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles</definition>
        <argsstring>(KeplerOrbit&lt; Scalar &gt; const &amp;orbit, Particle &amp;ptc1, Args &amp;... ptcs)</argsstring>
        <name>move_particles</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; Scalar &gt; const &amp;</type>
          <declname>orbit</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
<para>Move the centre of mass position and velocity of particles/a cluster of particles/single particle to the corresponding position and velocity of a Kepler orbit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point like type for <ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first particle/std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector).. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles if exits, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">orbit</parametername>
</parameternamelist>
<parameterdescription>
<para>The Kepler orbit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle/The cluster/single particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ptcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles need to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="353" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="353" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab6e8ae7f7ad9035524595a2d1b540a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Particle</declname>
            <defname>Particle</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_to_COM_frame</definition>
        <argsstring>(Particle &amp;... ptc)</argsstring>
        <name>move_to_COM_frame</name>
        <param>
          <type>Particle &amp;...</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Move the particles/a cluster of particles/single particle to the centre of mass frame and set the centre of mass to original point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first particle/std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>The particles/The cluster/single particle needs to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="368" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a554cddd364d8d653bf8f2d5de717c2d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_eccentricity</definition>
        <argsstring>(Cluster1 const &amp;p1, Cluster2 const &amp;p2)</argsstring>
        <name>calc_eccentricity</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate the eccentricity of two clusters(cluster can also be a single particle) by regarding their centre of mass as point particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The eccentricity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="386" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="386" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a3cefe8d59dbaad7cc8fda0dede0274be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_semi_major_axis</definition>
        <argsstring>(Cluster1 const &amp;p1, Cluster2 const &amp;p2)</argsstring>
        <name>calc_semi_major_axis</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate the semi-major axis of two clusters(cluster can also be a single particle) by regarding their centre of mass as point particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The semi-major axis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="407" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="407" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a9da0f714d9323621a6af19505987188b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_a_e</definition>
        <argsstring>(Cluster1 const &amp;p1, Cluster2 const &amp;p2)</argsstring>
        <name>calc_a_e</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate the semi-major axis and eccentricity of two clusters(cluster can also be a single particle) by regarding their centre of mass as point particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto A tuple of (sem-major axis, eccentricity). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="428" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="428" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a71f4a3021854a242b8146bd54f6e9447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::period</definition>
        <argsstring>(Cluster1 const &amp;p1, Cluster2 const &amp;p2)</argsstring>
        <name>period</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate the semi-major axis of two clusters(cluster can also be a single particle) by regarding their centre of mass as point particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The period. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="449" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="449" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a8ca73a6c05802dc9e130699e4b39f0a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::time_to_periapsis</definition>
        <argsstring>(Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2)</argsstring>
        <name>time_to_periapsis</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <briefdescription>
<para>Calculate the time to the periapsis of two clusters(cluster can also be a single particle) by regarding their centre of mass as point particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The time to the periapsis. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="468" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="468" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ac33dc349fe9e64484a74e051cfc1035d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_k</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>E_k</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the kinetic energy of a cluster/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The kinetic energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="503" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="503" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a25730c3a07f816f791bd72dece99080c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_k</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... args)</argsstring>
        <name>E_k</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calculate the kinetic energy of particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The kinetic energy of particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="528" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="528" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a67bd62b7b705eba14c2dd7e92638b5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_p</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>E_p</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the potential energy of a cluster/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The potential energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="544" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="544" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a175e1895a0aca755edbfc9c8c3da5d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_p</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... args)</argsstring>
        <name>E_p</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calculate the kinetic energy of particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The potential energy of particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="570" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ae286be0afe88805f3e7ec992be4518a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_k_COM</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>E_k_COM</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the kinetic energy of the centre of mass of a cluster/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The kinetic energy of the centre of mass. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="584" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="584" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ac55eec563e51ff10ae37ba4c27fd8665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_k_COM</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... args)</argsstring>
        <name>E_k_COM</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calculate the kinetic energy of the centre of mass of particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The kinetic energy of the centre of mass of particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="601" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="601" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a276c70533d1dbfa22aea7dd65b767fe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Particle</declname>
            <defname>Particle</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_tot</definition>
        <argsstring>(Particle const &amp;... ptc)</argsstring>
        <name>E_tot</name>
        <param>
          <type>Particle const &amp;...</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the total energy of particles/a cluster of particles/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first particle/std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>The particles/The cluster/single particle needs to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The total energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="617" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="617" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab6f2a54b91073cd4972116c10084ea1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Particle</declname>
            <defname>Particle</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_inner</definition>
        <argsstring>(Particle const &amp;... ptc)</argsstring>
        <name>E_inner</name>
        <param>
          <type>Particle const &amp;...</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the inner energy of particles/a cluster of particles/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first particle/std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>The particles/The cluster/single particle needs to be evaluated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The inner energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="630" column="13" bodyfile="src/orbits/particle-manip.hpp" bodystart="630" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1abc045d6908e3d7f942a33b93085c16a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::cluster_size</definition>
        <argsstring>(Cluster const &amp;ptc)</argsstring>
        <name>cluster_size</name>
        <param>
          <type>Cluster const &amp;</type>
          <declname>ptc</declname>
        </param>
        <briefdescription>
<para>Calculate the size of a cluster/single particle. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the cluster are calculated by detecting the farest distance between two particles in this cluster.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc</parametername>
</parameternamelist>
<parameterdescription>
<para>particle container/single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The size of the cluster. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="645" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="645" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a38d2063685c03d112fe6c5ae69f186a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::cluster_size</definition>
        <argsstring>(Particle const &amp;ptc1, Particle const &amp;ptc2, Args const &amp;... args)</argsstring>
        <name>cluster_size</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>ptc2</declname>
        </param>
        <param>
          <type>Args const &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calculate the size of a set of particles. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the cluster are calculated by detecting the farest distance between two particles in this cluster.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particle with public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the particles, should be same as Particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptc1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptc2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest particles if exits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The size of the cluster. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="684" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="684" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1aaec086176d2f17382202da3f14fd8d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_tid</definition>
        <argsstring>(Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2, Scalar R1, Scalar R2)</argsstring>
        <name>E_tid</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R2</declname>
        </param>
        <briefdescription>
<para>Calculate the tidal potential between two clusters/single particles by providing the size of clusters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point like type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">R1</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the first cluster. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">R2</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the second cluster. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The tidal potential energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="704" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="704" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a688cc5a754ecb388d27a798a682060f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::E_tid</definition>
        <argsstring>(Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2)</argsstring>
        <name>E_tid</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <briefdescription>
<para>Calculate the tidal potential between two clusters/single particles. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the clusters will be estimated by <ref refid="namespacespace_1_1orbit_1abc045d6908e3d7f942a33b93085c16a8" kindref="member">cluster_size()</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point like type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The tidal potential energy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="727" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="727" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a113298977f782f979683179ae863dc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_factor</definition>
        <argsstring>(Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2, Scalar R1, Scalar R2)</argsstring>
        <name>tidal_factor</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R2</declname>
        </param>
        <briefdescription>
<para>Calculate the tidal factors between two clusters/single particles by providing the size of clusters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point like type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">R1</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the first cluster. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">R2</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the second cluster. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto A tuple of (factor1, factor2), where factor1 is the tidal factor of first cluster and factor2 is for the second. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="749" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="749" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1abb8b47bd133ebaa523e9e310706caeb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_factor</definition>
        <argsstring>(Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2)</argsstring>
        <name>tidal_factor</name>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <briefdescription>
<para>Calculate the tidal factors between two clusters/single particles. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the clusters will be estimated by <ref refid="namespacespace_1_1orbit_1abc045d6908e3d7f942a33b93085c16a8" kindref="member">cluster_size()</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto A tuple of (factor1, factor2), where factor1 is the tidal factor of first cluster and factor2 is for the second. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="772" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="772" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1abbedcf71bf1879ead67cde1138e0890e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_radius</definition>
        <argsstring>(Scalar tidal_factor, Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2, Scalar R2)</argsstring>
        <name>tidal_radius</name>
        <param>
          <type>Scalar</type>
          <declname>tidal_factor</declname>
        </param>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>R2</declname>
        </param>
        <briefdescription>
<para>Calculate the tidal radius between two clusters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point like type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tidal_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The tidal factor indicates where the radius is estimated. =1 means tidal disrupted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R2</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the second cluster. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The tidal radius of the second cluster tidaled by the first cluster. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="793" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="793" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab3e550e17aa88430644d00fb6fb54ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cluster1</type>
          </param>
          <param>
            <type>typename Cluster2</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::tidal_radius</definition>
        <argsstring>(Scalar tidal_factor, Cluster1 const &amp;cluster1, Cluster2 const &amp;cluster2)</argsstring>
        <name>tidal_radius</name>
        <param>
          <type>Scalar</type>
          <declname>tidal_factor</declname>
        </param>
        <param>
          <type>Cluster1 const &amp;</type>
          <declname>cluster1</declname>
        </param>
        <param>
          <type>Cluster2 const &amp;</type>
          <declname>cluster2</declname>
        </param>
        <briefdescription>
<para>Calculate the tidal radius between two clusters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>std::ranges(Container) with element type has public member <computeroutput>mass</computeroutput>(Scalar), <computeroutput>pos</computeroutput>(Vector) and <computeroutput>vel</computeroutput>(Vector)./Type of single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Floating point like type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tidal_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The tidal factor indicates where the radius is estimated. =1 means tidal disrupted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cluster2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second cluster/first single particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The tidal radius of the second cluster tidaled by the first cluster. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/particle-manip.hpp" line="814" column="6" bodyfile="src/orbits/particle-manip.hpp" bodystart="814" bodyend="817"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Documentation </para>
    </detaileddescription>
    <location file="src/orbits/orbits.hpp" line="34" column="1"/>
  </compounddef>
</doxygen>
