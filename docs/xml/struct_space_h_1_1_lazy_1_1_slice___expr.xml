<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="struct_space_h_1_1_lazy_1_1_slice___expr" kind="struct" language="C++" prot="public">
    <compoundname>SpaceH::Lazy::Slice_Expr</compoundname>
    <basecompoundref refid="struct_space_h_1_1_lazy_1_1_expr" prot="public" virt="non-virtual">SpaceH::Lazy::Expr&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</basecompoundref>
    <includes refid="slice_8h" local="no">slice.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>int</type>
        <declname>Begin</declname>
        <defname>Begin</defname>
      </param>
      <param>
        <type>int</type>
        <declname>End</declname>
        <defname>End</defname>
      </param>
      <param>
        <type>int</type>
        <declname>Stride</declname>
        <defname>Stride</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>SrcSize</declname>
        <defname>SrcSize</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_space_h_1_1_lazy_1_1_slice___expr_1ad7a1357901f2c23ce9c865590e617c27" prot="public" static="no">
        <type>typename T::value_type</type>
        <definition>using SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::value_type =  typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="49" column="3" bodyfile="src/lazy-evaluation/slice.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_space_h_1_1_lazy_1_1_slice___expr_1af6cdf5b8352304847ae70cf406e20afd" prot="private" static="no" mutable="no">
        <type>T &amp;</type>
        <definition>T&amp; SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::src_</definition>
        <argsstring></argsstring>
        <name>src_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="46" column="5" bodyfile="src/lazy-evaluation/slice.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1ae7807a24ac3b7d5b94b294d863c1687e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::Slice_Expr</definition>
        <argsstring>(T &amp;src)</argsstring>
        <name>Slice_Expr</name>
        <param>
          <type>T &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="51" column="12" bodyfile="src/lazy-evaluation/slice.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1a453f84adc5053709a73682f1ee2fec1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_space_h_1_1_lazy_1_1_slice___expr" kindref="compound">Slice_Expr</ref> &amp;</type>
        <definition>Slice_Expr&amp; SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::operator=</definition>
        <argsstring>(const value_type &amp;scalar)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ad7a1357901f2c23ce9c865590e617c27" kindref="member">value_type</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="55" column="14" bodyfile="src/lazy-evaluation/slice.h" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1adf4ef281b9f1726aadbfe2a72e28207b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ad7a1357901f2c23ce9c865590e617c27" kindref="member">value_type</ref> &amp;</type>
        <definition>const value_type&amp; SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::eval</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>eval</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="62" column="27" bodyfile="src/lazy-evaluation/slice.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1ab39be14d6286c12344c877fac3085db9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ad7a1357901f2c23ce9c865590e617c27" kindref="member">value_type</ref> &amp;</type>
        <definition>const value_type&amp; SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="64" column="27" bodyfile="src/lazy-evaluation/slice.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1a2411acbcb2265fe7cf9ca2b1afef6875" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ad7a1357901f2c23ce9c865590e617c27" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type&amp; SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="66" column="21" bodyfile="src/lazy-evaluation/slice.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1ab1104037b93baa734f225a4aa01a0108" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="68" column="5" bodyfile="src/lazy-evaluation/slice.h" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1a8de487fed4f00ca7603a6326cca38fe0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="76" column="5" bodyfile="src/lazy-evaluation/slice.h" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1ab5b65c0ee2959e752b07e5436a0715e9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Begin__LINE__</declname>
            <defname>Begin__LINE__</defname>
          </param>
          <param>
            <type>int</type>
            <declname>End__LINE__</declname>
            <defname>End__LINE__</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Stride__LINE__</declname>
            <defname>Stride__LINE__</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::operator[]</definition>
        <argsstring>(const Slice&lt; Begin__LINE__, End__LINE__, Stride__LINE__ &gt; &amp;slice) -&gt; Slice_Expr&lt; typename std::remove_reference&lt; decltype(*this)&gt;::type, Begin__LINE__, End__LINE__, Stride__LINE__, std::remove_reference&lt; decltype(*this)&gt;::type ::size()&gt;</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="struct_space_h_1_1_lazy_1_1_slice" kindref="compound">Slice</ref>&lt; Begin__LINE__, End__LINE__, Stride__LINE__ &gt; &amp;</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="84" column="52" bodyfile="src/lazy-evaluation/slice.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1a5dc48b5baaca706112f65502346a0295" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_space_h_1_1_lazy_1_1_slice___expr" kindref="compound">Slice_Expr</ref> &amp;</type>
        <definition>Slice_Expr&amp; SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::operator=</definition>
        <argsstring>(const Expr&lt; U &gt; &amp;rhs_expr)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="struct_space_h_1_1_lazy_1_1_expr" kindref="compound">Expr</ref>&lt; U &gt; &amp;</type>
          <declname>rhs_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="87" column="14" bodyfile="src/lazy-evaluation/slice.h" bodystart="87" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_slice___expr_1a6eca9207127464b5fa31de2071ff95a8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr static size_t</type>
        <definition>constexpr static size_t SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/slice.h" line="53" column="27" bodyfile="src/lazy-evaluation/slice.h" bodystart="53" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>SpaceH::Lazy::Expr&lt; Derived &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
      </node>
      <node id="1">
        <label>SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_slice___expr"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SpaceH::Lazy::Expr&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>SpaceH::Lazy::Expr&lt; Derived &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
      </node>
      <node id="1">
        <label>SpaceH::Lazy::Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_slice___expr"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SpaceH::Lazy::Expr&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; Slice_Expr&lt; T, Begin, End, Stride, SrcSize &gt; &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/lazy-evaluation/slice.h" line="44" column="35" bodyfile="src/lazy-evaluation/slice.h" bodystart="44" bodyend="94"/>
    <listofallmembers>
      <member refid="struct_space_h_1_1_lazy_1_1_expr_1ada9ca100b1aa730e95c0ee6bf802d340" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>cast</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1adf4ef281b9f1726aadbfe2a72e28207b" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>eval</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ab1104037b93baa734f225a4aa01a0108" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>max</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1a8de487fed4f00ca7603a6326cca38fe0" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>min</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1a453f84adc5053709a73682f1ee2fec1b" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>operator=</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1a5dc48b5baaca706112f65502346a0295" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>operator=</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ab39be14d6286c12344c877fac3085db9" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>operator[]</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1a2411acbcb2265fe7cf9ca2b1afef6875" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>operator[]</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ab5b65c0ee2959e752b07e5436a0715e9" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>operator[]</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1a6eca9207127464b5fa31de2071ff95a8" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>size</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ae7807a24ac3b7d5b94b294d863c1687e" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>Slice_Expr</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1af6cdf5b8352304847ae70cf406e20afd" prot="private" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>src_</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_slice___expr_1ad7a1357901f2c23ce9c865590e617c27" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Slice_Expr</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
