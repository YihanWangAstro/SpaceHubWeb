<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structspace_1_1is__indexable" kind="struct" language="C++" prot="public">
    <compoundname>space::is_indexable</compoundname>
    <includes refid="dev-tools_8hpp" local="no">dev-tools.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structspace_1_1is__indexable_1abb1d9b371ddc6a642fe07db90287377e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool space::is_indexable&lt; T, Args &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= decltype(<ref refid="structspace_1_1is__indexable_1a90c355a37650a94aea017c6905055722" kindref="member">check</ref>&lt;T&gt;(nullptr))::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="309" column="27" bodyfile="src/dev-tools.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structspace_1_1is__indexable_1a90c355a37650a94aea017c6905055722" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr static auto</type>
        <definition>constexpr static auto space::is_indexable&lt; T, Args &gt;::check</definition>
        <argsstring>(const void *) -&gt; decltype(std::declval&lt; U &gt;().operator[](std::declval&lt; Args &gt;()...), std::true_type())</argsstring>
        <name>check</name>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="303" column="27"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1is__indexable_1a40b79106540a129098e4a0faa0017fe5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr static std::false_type</type>
        <definition>constexpr static std::false_type space::is_indexable&lt; T, Args &gt;::check</definition>
        <argsstring>(...)</argsstring>
        <name>check</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="307" column="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>space::is_indexable&lt; T, Args &gt;</label>
        <link refid="structspace_1_1is__indexable"/>
      </node>
    </collaborationgraph>
    <location file="src/dev-tools.hpp" line="301" column="21" bodyfile="src/dev-tools.hpp" bodystart="301" bodyend="310"/>
    <listofallmembers>
      <member refid="structspace_1_1is__indexable_1a90c355a37650a94aea017c6905055722" prot="public" virt="non-virtual"><scope>space::is_indexable</scope><name>check</name></member>
      <member refid="structspace_1_1is__indexable_1a40b79106540a129098e4a0faa0017fe5" prot="public" virt="non-virtual"><scope>space::is_indexable</scope><name>check</name></member>
      <member refid="structspace_1_1is__indexable_1abb1d9b371ddc6a642fe07db90287377e" prot="public" virt="non-virtual"><scope>space::is_indexable</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
