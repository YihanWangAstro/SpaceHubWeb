<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="dev-tools_8hpp" kind="file" language="C++">
    <compoundname>dev-tools.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">tuple</includes>
    <includes local="no">array</includes>
    <includes refid="_i_o_8hpp" local="yes">IO.hpp</includes>
    <includedby refid="callbacks_8hpp" local="yes">src/args-callback/callbacks.hpp</includedby>
    <includedby refid="collision_8hpp" local="yes">src/args-callback/collision.hpp</includedby>
    <includedby refid="vector3_8hpp" local="yes">src/vector/vector3.hpp</includedby>
    <includedby refid="math_8hpp" local="yes">src/math.hpp</includedby>
    <includedby refid="coords_8hpp" local="yes">src/coords.hpp</includedby>
    <includedby refid="_gauss-_dadau_8hpp" local="yes">src/integrator/Gauss-Dadau.hpp</includedby>
    <includedby refid="particle-system_8hpp" local="yes">src/particle-system/particle-system.hpp</includedby>
    <includedby refid="symplectic-integrator_8hpp" local="yes">src/integrator/symplectic/symplectic-integrator.hpp</includedby>
    <includedby refid="accelerations_8hpp" local="yes">src/interaction/accelerations.hpp</includedby>
    <includedby refid="post-newtonian_8hpp" local="yes">src/interaction/post-newtonian.hpp</includedby>
    <includedby refid="tidal_8hpp" local="yes">src/interaction/tidal.hpp</includedby>
    <includedby refid="multi-thread_8hpp" local="yes">src/multi-thread/multi-thread.hpp</includedby>
    <includedby refid="lazy__expr_8h" local="yes">src/lazy-evaluation/lazy_expr.h</includedby>
    <includedby refid="ciostream_8hpp" local="yes">src/multi-thread/ciostream.hpp</includedby>
    <includedby refid="error-checker_8hpp" local="yes">src/ode-iterator/error-checker/error-checker.hpp</includedby>
    <includedby refid="_i_a_s15_8hpp" local="yes">src/ode-iterator/IAS15.hpp</includedby>
    <includedby refid="stepsize-controller_8hpp" local="yes">src/ode-iterator/step-controller/stepsize-controller.hpp</includedby>
    <includedby refid="particle-manip_8hpp" local="yes">src/orbits/particle-manip.hpp</includedby>
    <includedby refid="particles_8hpp" local="yes">src/particles/particles.hpp</includedby>
    <includedby refid="simulator_8hpp" local="yes">src/simulator.hpp</includedby>
    <includedby refid="config-reader_8hpp" local="yes">src/tools/config-reader.hpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>IO.hpp</label>
        <link refid="_i_o_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/dev-tools.hpp</label>
        <link refid="dev-tools_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>tuple</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="29">
        <label>src/ode-iterator/BS-iterator_bk.hpp</label>
        <link refid="_b_s-iterator__bk_8hpp"/>
      </node>
      <node id="43">
        <label>src/lazy-evaluation/mkl-array.h</label>
        <link refid="mkl-array_8h"/>
      </node>
      <node id="44">
        <label>src/multi-thread/ciostream.hpp</label>
        <link refid="ciostream_8hpp"/>
      </node>
      <node id="32">
        <label>src/integrator/integrator.hpp</label>
        <link refid="integrator_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/orbits/orbits.hpp</label>
        <link refid="orbits_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>src/ode-iterator/error-checker/RMS.hpp</label>
        <link refid="_r_m_s_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/interaction/newtonian.hpp</label>
        <link refid="newtonian_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>src/ode-iterator/error-checker/worst-offender.hpp</label>
        <link refid="worst-offender_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>src/kahan-number.hpp</label>
        <link refid="kahan-number_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>src/interaction/accelerations.hpp</label>
        <link refid="accelerations_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>src/ode-iterator/const-iterator.hpp</label>
        <link refid="const-iterator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/particle-system/chain.hpp</label>
        <link refid="chain_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/particle-system/archain.hpp</label>
        <link refid="archain_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/interaction/interaction.hpp</label>
        <link refid="interaction_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>src/lazy-evaluation/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>src/ode-iterator/step-controller/stepsize-controller.hpp</label>
        <link refid="stepsize-controller_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/vector/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>src/simulator.hpp</label>
        <link refid="simulator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/spaceHub.hpp</label>
        <link refid="space_hub_8hpp"/>
      </node>
      <node id="23">
        <label>src/particle-system/chain-system.hpp</label>
        <link refid="chain-system_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/args-callback/callbacks.hpp</label>
        <link refid="callbacks_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/integrator/symplectic/symplectic-integrator.hpp</label>
        <link refid="symplectic-integrator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>src/tools/config-reader.hpp</label>
        <link refid="config-reader_8hpp"/>
      </node>
      <node id="16">
        <label>src/particles/finite-size.hpp</label>
        <link refid="finite-size_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>src/ode-iterator/error-checker/error-checker.hpp</label>
        <link refid="error-checker_8hpp"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/scattering/cross-section.hpp</label>
        <link refid="cross-section_8hpp"/>
      </node>
      <node id="1">
        <label>src/dev-tools.hpp</label>
        <link refid="dev-tools_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>src/lazy-evaluation/lazy_array.h</label>
        <link refid="lazy__array_8h"/>
      </node>
      <node id="50">
        <label>src/particles/particles.hpp</label>
        <link refid="particles_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>src/orbits/particle-manip.hpp</label>
        <link refid="particle-manip_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>src/particle-system/regu-system.hpp</label>
        <link refid="regu-system_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>src/ode-iterator/error-checker/IAS15-error.hpp</label>
        <link refid="_i_a_s15-error_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>src/ode-iterator/Burlish-Stoer.hpp</label>
        <link refid="_burlish-_stoer_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>src/ode-iterator/BS-iterator0.hpp</label>
        <link refid="_b_s-iterator0_8hpp"/>
      </node>
      <node id="34">
        <label>src/ode-iterator/ode-iterator.hpp</label>
        <link refid="ode-iterator_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>src/lazy-evaluation/lazy_expr.h</label>
        <link refid="lazy__expr_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/ode-iterator/IAS15.hpp</label>
        <link refid="_i_a_s15_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/args-callback/collision.hpp</label>
        <link refid="collision_8hpp"/>
      </node>
      <node id="10">
        <label>src/interaction/post-newtonian.hpp</label>
        <link refid="post-newtonian_8hpp"/>
      </node>
      <node id="25">
        <label>src/particle-system/base-system.hpp</label>
        <link refid="base-system_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/core-computation.hpp</label>
        <link refid="core-computation_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/interaction/tidal.hpp</label>
        <link refid="tidal_8hpp"/>
      </node>
      <node id="30">
        <label>src/ode-iterator/step-controller/PID-controller.hpp</label>
        <link refid="_p_i_d-controller_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>src/math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/type-class.hpp</label>
        <link refid="type-class_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>src/multi-thread/multi-thread.hpp</label>
        <link refid="multi-thread_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/particles/point-particles.hpp</label>
        <link refid="point-particles_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>src/rand-generator.hpp</label>
        <link refid="rand-generator_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/integrator/Gauss-Dadau.hpp</label>
        <link refid="_gauss-_dadau_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/coords.hpp</label>
        <link refid="coords_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>src/particle-system/particle-system.hpp</label>
        <link refid="particle-system_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classspace_1_1_empty" prot="public">space::Empty</innerclass>
    <innerclass refid="structspace_1_1get__value__type" prot="public">space::get_value_type</innerclass>
    <innerclass refid="structspace_1_1is__indexable" prot="public">space::is_indexable</innerclass>
    <innerclass refid="structspace_1_1is__reservable" prot="public">space::is_reservable</innerclass>
    <innerclass refid="structspace_1_1is__ranges" prot="public">space::is_ranges</innerclass>
    <innerclass refid="structspace_1_1is__ranges__helper" prot="public">space::is_ranges_helper</innerclass>
    <innerclass refid="structspace_1_1is__ranges_3_01_t_00_01std_1_1conditional__t_3_01false_00_01is__ranges__helper_3_dfd741d710d2af4f42f5a693851cc2c1" prot="public">space::is_ranges&lt; T, std::conditional_t&lt; false, is_ranges_helper&lt; typename T::value_type, decltype(std::declval&lt; T &gt;().size()), decltype(std::declval&lt; T &gt;().begin()), decltype(std::declval&lt; T &gt;().end()) &gt;, void &gt; &gt;</innerclass>
    <innernamespace refid="namespacespace">space</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="dev-tools_8hpp_1ae4334217b14191738cf54d7b89e42b00" prot="public" static="no">
        <name>CRTP_IMPL</name>
        <initializer>friend Base; protected</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="90" column="9" bodyfile="src/dev-tools.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1acdfe40b6293bb934c6e9b3a8e3446647" prot="public" static="no">
        <name>MACRO_CAT</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1a73b71c9cec23232564276263c3c36b67" kindref="member">MACRO_CAT_I</ref>(A, B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="92" column="9" bodyfile="src/dev-tools.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a73b71c9cec23232564276263c3c36b67" prot="public" static="no">
        <name>MACRO_CAT_I</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1ac0633fcb84d102fae11cf1915d380ae4" kindref="member">MACRO_CAT_II</ref>(~, A ## B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="93" column="9" bodyfile="src/dev-tools.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac0633fcb84d102fae11cf1915d380ae4" prot="public" static="no">
        <name>MACRO_CAT_II</name>
        <param><defname>P</defname></param>
        <param><defname>REST</defname></param>
        <initializer>REST</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="94" column="9" bodyfile="src/dev-tools.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" prot="public" static="no">
        <name>UNIQ</name>
        <param><defname>BASE</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1acdfe40b6293bb934c6e9b3a8e3446647" kindref="member">MACRO_CAT</ref>(BASE, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="95" column="9" bodyfile="src/dev-tools.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a7e3ba13a65ca1eb893e8a01d8e89d570" prot="public" static="no">
        <name>PACK</name>
        <param><defname>...</defname></param>
        <initializer>std::forward_as_tuple(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="97" column="9" bodyfile="src/dev-tools.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1afa143f3d190b8ed8cdfd048cb74f99ee" prot="public" static="no">
        <name>DEBUG_MODE</name>
        <param><defname>BLOCK</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="102" column="10" bodyfile="src/dev-tools.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a58c80f7d71aa5555df912ee9d60d34ea" prot="public" static="no">
        <name>DEBUG_MSG</name>
        <param><defname>EXPR</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Macros used to output debuf info. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="109" column="10" bodyfile="src/dev-tools.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1abf836016ac652bb5c932fe102c48301e" prot="public" static="no">
        <name>DEBUG_MODE_ASSERT</name>
        <param><defname>EXPR</defname></param>
        <param><defname>MSG</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="115" column="10" bodyfile="src/dev-tools.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a3102a3792f55f3ad5ff10f5fe3a6ce79" prot="public" static="no">
        <name>EXPR</name>
        <initializer>, X, CONTAINER)                                                                                          \
  [&amp;](){ using Type = std::remove_reference_v&lt;decltype(CONTAINER)&gt;; Type result;                                       \
  if constexpr(is_reservable&lt;Type&gt;::value){                                                                            \
    result.reserve(CONTAINER.size())                                                                                   \
  }                                                                                                                    \
  std::transform(std::begin(CONTAINER), std::end(CONTAINER), std::back_inserter(result), [](auto&amp; X) { return EXPR; });\
  return result;}()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="118" column="9" bodyfile="src/dev-tools.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac2bdf3bcd9a8848f9533cb143fea0a3a" prot="public" static="no">
        <name>SPACEHUB_MAKE_CONSTRUCTORS</name>
        <param><defname>CLASS</defname></param>
        <param><defname>ATTR1</defname></param>
        <param><defname>ATTR2</defname></param>
        <param><defname>ATTR3</defname></param>
        <param><defname>ATTR4</defname></param>
        <param><defname>ATTR5</defname></param>
        <initializer>/** Default constructor. */                                                                                            \
    CLASS() = ATTR1;                                                                                                   \
/** Default copy constructor. */                                                                                       \
    CLASS(CLASS const&amp;) = ATTR2;                                                                                       \
/** Default move constructor */                                                                                        \
    CLASS(CLASS &amp;&amp;) = ATTR3;                                                                                           \
/** Default copy assignment operator */                                                                                \
    CLASS &amp;operator=(CLASS const &amp;) = ATTR4;                                                                           \
/** Default move assignment operator */                                                                                \
    CLASS &amp;operator=(CLASS &amp;&amp;) = ATTR5;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="126" column="9" bodyfile="src/dev-tools.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a0f585cf51c90e87b303299d7e5901c62" prot="public" static="no">
        <name>SPACEHUB_USING_TYPE_SYSTEM_OF</name>
        <param><defname>CLASS</defname></param>
        <initializer>template&lt;typename ..._T_&gt;                                                                                          \
    using Container   = typename CLASS::template Container&lt;_T_...&gt;;                                                    \
                                                                                                                       \
    using Scalar      = typename CLASS::Scalar;                                                                        \
    using ScalarArray = typename CLASS::ScalarArray;                                                                   \
    using IdxArray    = typename CLASS::IdxArray;                                                                      \
    using IntArray    = typename CLASS::IntArray;                                                                      \
    using Vector      = typename CLASS::Vector;                                                                        \
    using VectorArray = typename CLASS::VectorArray;                                                                   \
    using Coord       = typename CLASS::Coord</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="139" column="9" bodyfile="src/dev-tools.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ae057e45edf56a31a4859f89e6bba2100" prot="public" static="no">
        <name>DECLARE_CRTP_ACCESSOR</name>
        <param><defname>DERIVED</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <initializer>/**@must_impl The setter interface of member `NAME`. */                                                                \
inline TYPE &amp; NAME () noexcept {                                                                                       \
    return static_cast&lt;Derived*&gt;(this)-&gt;impl_##NAME();                                                                 \
};                                                                                                                     \
/**@must_impl The getter interface of member `NAME`. */                                                                \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return static_cast&lt;Derived const*&gt;(this)-&gt;impl_##NAME();                                                           \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="151" column="9" bodyfile="src/dev-tools.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a681c127002bf82b9b09dbd0545db1646" prot="public" static="no">
        <name>DECLARE_CRTP_READ_ACCESSOR</name>
        <param><defname>DERIVED</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <initializer>/**@must_impl The getter interface of member `NAME`. */                                                                \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return static_cast&lt;Derived*&gt;(this)-&gt;impl_##NAME();                                                                 \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="161" column="9" bodyfile="src/dev-tools.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a7048ff21fd022abe7a131342f2fed10d" prot="public" static="no">
        <name>SPACEHUB_STD_ACCESSOR</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>/** The setter interface of member `MEMBER` in name of `NAME`.*/                                                       \
inline TYPE &amp; NAME () noexcept {                                                                                       \
    return MEMBER;                                                                                                     \
};                                                                                                                     \
/** The getter interface of member `MEMBER` in name of `NAME`.*/                                                       \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return MEMBER;                                                                                                     \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="167" column="9" bodyfile="src/dev-tools.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a6e8dcb3772ed46afbe5b83c269336181" prot="public" static="no">
        <name>SPACEHUB_READ_ACCESSOR</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>/** The getter interface of member `MEMBER` in name of `NAME`. */                                                      \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return MEMBER;                                                                                                     \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="177" column="9" bodyfile="src/dev-tools.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a16a43cfb9c6285e18aa33ac354efdd4a" prot="public" static="no">
        <name>SPACEHUB_CONDITIONAL_ACCESSOR</name>
        <param><defname>CONDITION</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>/** The setter interface of member `MEMBER` in name of `NAME` if `CONDITION` is satisfied.*/                           \
inline TYPE &amp; NAME () noexcept {                                                                                       \
    static_assert(CONDITION);                                                                                          \
    return MEMBER;                                                                                                     \
};                                                                                                                     \
/** The getter interface of member `MEMBER` in name of `NAME` if `CONDITION` is satisfied.*/                           \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    static_assert(CONDITION);                                                                                          \
    return MEMBER;                                                                                                     \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="183" column="9" bodyfile="src/dev-tools.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a17f1412cb72cf056651b85cafb170d8c" prot="public" static="no">
        <name>SPACEHUB_CONDITIONAL_READ_ACCESSOR</name>
        <param><defname>CONDITION</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>/** The getter interface of member `MEMBER` in name of `NAME` if `CONDITION` is satisfied. */                          \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    static_assert(CONDITION);                                                                                          \
    return MEMBER;                                                                                                     \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="195" column="9" bodyfile="src/dev-tools.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a043ac749777107d34e02197c9942ac3d" prot="public" static="no">
        <name>CREATE_METHOD_CHECK</name>
        <param><defname>NAME</defname></param>
        <initializer>template&lt;typename T, typename... Args&gt;                                                                             \
    struct has_method_##NAME                                                                                           \
    {                                                                                                                  \
        template&lt;typename U&gt;                                                                                           \
        constexpr static auto check(const void*)                                                                       \
        -&gt;decltype(std::declval&lt;U&gt;().NAME(std::declval&lt;Args&gt;()...), std::true_type());                                 \
                                                                                                                       \
        template&lt;typename U&gt;                                                                                           \
        constexpr static std::false_type check(...);                                                                   \
                                                                                                                       \
        static constexpr bool value = decltype(check&lt;T&gt;(nullptr))::value;                                              \
    };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="202" column="9" bodyfile="src/dev-tools.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a01123b58bcb865a870641e5f30ce8ed2" prot="public" static="no">
        <name>HAS_METHOD</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>has_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="216" column="9" bodyfile="src/dev-tools.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a002df30e7890bdb68e3693ca94c9e684" prot="public" static="no">
        <name>CREATE_PROTECTED_METHOD_CHECK</name>
        <param><defname>NAME</defname></param>
        <initializer>template&lt;typename __T, typename... __Args&gt;                                                                         \
    struct has_protected_method_##NAME : public __T                                                                    \
    {                                                                                                                  \
        template&lt;typename U&gt;                                                                                           \
        constexpr static auto check(const void*)                                                                       \
        -&gt;decltype(std::declval&lt;has_protected_method_##NAME&lt;U, __Args...&gt; &gt;().NAME(std::declval&lt;__Args&gt;()...), std::true_type());\
                                                                                                                       \
        template&lt;typename U&gt;                                                                                           \
        constexpr static std::false_type check(...);                                                                   \
                                                                                                                       \
        static constexpr bool value = decltype(check&lt;__T&gt;(nullptr))::value;                                            \
    };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="219" column="9" bodyfile="src/dev-tools.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a1c72db210bcf48a1b855a5e83e78e840" prot="public" static="no">
        <name>HAS_PROTECTED_METHOD</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>has_protected_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="233" column="9" bodyfile="src/dev-tools.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a4250abbdfc25337cd0dca29f9b55ff47" prot="public" static="no">
        <name>CREATE_CRTP_IMPLEMENTATION_CHECK</name>
        <param><defname>NAME</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1a002df30e7890bdb68e3693ca94c9e684" kindref="member">CREATE_PROTECTED_METHOD_CHECK</ref>(impl_##NAME) <ref refid="dev-tools_8hpp_1a043ac749777107d34e02197c9942ac3d" kindref="member">CREATE_METHOD_CHECK</ref>(NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="235" column="9" bodyfile="src/dev-tools.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a71c2a282f291770b45b3f1cef8c19f75" prot="public" static="no">
        <name>HAS_CRTP_IMPLEMENTATION</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>has_protected_method_impl_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value &amp;&amp; has_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="237" column="9" bodyfile="src/dev-tools.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a86408b2e79be508b3c8b8c90f66e89a7" prot="public" static="no">
        <name>CREATE_MEMBER_CHECK</name>
        <param><defname>MEMBER</defname></param>
        <initializer>template&lt;typename __T, typename __V = bool&gt;                                                                        \
    struct has_ ## MEMBER : std::false_type { };                                                                       \
                                                                                                                       \
    template&lt;typename __T&gt;                                                                                             \
    struct has_ ## MEMBER                                                                                              \
    &lt;                                                                                                                  \
        __T,                                                                                                           \
        typename std::enable_if                                                                                        \
        &lt;                                                                                                              \
            !std::is_same&lt;decltype(std::declval&lt;__T&gt;().MEMBER), void&gt;::value, bool                                     \
        &gt;::type                                                                                                        \
    &gt;: std::true_type { };</initializer>
        <briefdescription>
<para>Macros used to check if a class has a member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="240" column="9" bodyfile="src/dev-tools.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a4e050f8974fcc0ca3e7ecfee0558f4f2" prot="public" static="no">
        <name>HAS_MEMBER</name>
        <param><defname>C</defname></param>
        <param><defname>member</defname></param>
        <initializer>has_ ## member&lt;C&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="254" column="9" bodyfile="src/dev-tools.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1acd50abf2f60a8ebc7dcc2a94bda2d7ca" prot="public" static="no">
        <name>CREATE_STATIC_MEMBER_CHECK</name>
        <param><defname>MEMBER</defname></param>
        <initializer>\
    template&lt;typename T, typename V = bool&gt;                                                                            \
    struct has_static ## MEMBER : std::false_type { };                                                                 \
                                                                                                                       \
    template&lt;typename T&gt;                                                                                               \
    struct has_static ## MEMBER                                                                                        \
    &lt;                                                                                                                  \
        T,                                                                                                             \
        typename std::enable_if                                                                                        \
        &lt;                                                                                                              \
            !std::is_same&lt;decltype(T::MEMBER), void&gt;::value, bool                                                      \
        &gt;::type                                                                                                        \
    &gt;: std::true_type { };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macros used to check if a class has a static member. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="257" column="9" bodyfile="src/dev-tools.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a53374bd759b4f29eaec7c33870b03da5" prot="public" static="no">
        <name>HAS_STATIC_MEMBER</name>
        <param><defname>C</defname></param>
        <param><defname>member</defname></param>
        <initializer>has_static ## member&lt;C&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="272" column="9" bodyfile="src/dev-tools.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac2fd4f3ea0b555c107cad2c9430717f8" prot="public" static="no">
        <name>CHECK_METHOD</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>\
            static_assert(has_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value,                                            \
            &quot;Template argument &apos;&quot; # CLASS  &quot;&apos; must have method &apos;&quot;  # METHOD  &quot;(&quot;  #__VA_ARGS__  &quot;)&apos;. &quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if a class has a specific method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="275" column="9" bodyfile="src/dev-tools.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a3004813da8a05abadaad077b5cacbc6f" prot="public" static="no">
        <name>CHECK_MEMBER</name>
        <param><defname>CLASS</defname></param>
        <param><defname>MB</defname></param>
        <initializer>static_assert(has_ ## MB&lt;C&gt;::value,                                                                              \
            &quot;Template argument &apos;&quot; # CLASS  &quot;&apos; must have member &apos;&quot;  # MB  &quot;&apos;. &quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if a class has a member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="281" column="9" bodyfile="src/dev-tools.hpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac10c0f62e719b8f64c36b62dfacfbd82" prot="public" static="no">
        <name>CHECK_STATIC_MEMBER</name>
        <param><defname>CLASS</defname></param>
        <param><defname>MB</defname></param>
        <initializer>\
            static_assert(has_static ## MB&lt;CLASS&gt;::value,                                                              \
            &quot;Template argument &apos;&quot; # CLASS  &quot;&apos; must have static member &apos;&quot;  # MB  &quot;&apos;. &quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if a class has a static member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="286" column="9" bodyfile="src/dev-tools.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a9165bf60ffe95b57b3a1deb24f92b7f7" prot="public" static="no">
        <name>CHECK_TYPE</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <initializer>static_assert(std::is_same&lt; typename T1::Types, typename T2::Types&gt;::value,                                \
            &quot;Template argument &apos;&quot; #T1 &quot;&apos; and &apos;&quot; #T2 &quot;&apos; must have the same type of the type member(space::ProtoType&lt;...&gt;)&quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if two class have the same base type set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="292" column="9" bodyfile="src/dev-tools.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ad76c4399904c876b0fde01a7edbaf093" prot="public" static="no">
        <name>CHECK_POD</name>
        <param><defname>DATA</defname></param>
        <initializer>static_assert(std::is_trivial&lt;DATA&gt;::value, &quot;Template arg &apos;&quot; #DATA &quot;&apos; must be a POD type!&quot;);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="297" column="9" bodyfile="src/dev-tools.hpp" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a8a3f3c65b4167fb7188576cfa5e2ca44" prot="public" static="no">
        <name>IS_BASE_OF</name>
        <param><defname>BASE</defname></param>
        <param><defname>DERIVED</defname></param>
        <initializer>(std::is_base_of&lt;BASE, DERIVED&gt;::value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="356" column="9" bodyfile="src/dev-tools.hpp" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a16d2c5a0818a4356eb912b06c8b0a0e3" prot="public" static="no">
        <name>TYPE_OF_SELF</name>
        <initializer>std::remove_reference&lt;decltype(*this)&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dev-tools.hpp" line="358" column="9" bodyfile="src/dev-tools.hpp" bodystart="358" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header file. </para>
    </detaileddescription>
    <location file="src/dev-tools.hpp"/>
  </compounddef>
</doxygen>
