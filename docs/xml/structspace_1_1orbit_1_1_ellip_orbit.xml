<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structspace_1_1orbit_1_1_ellip_orbit" kind="struct" language="C++" prot="public">
    <compoundname>space::orbit::EllipOrbit</compoundname>
    <basecompoundref refid="structspace_1_1orbit_1_1_kepler_orbit" prot="public" virt="non-virtual">space::orbit::KeplerOrbit&lt; double &gt;</basecompoundref>
    <includes refid="orbits_8hpp" local="no">orbits.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" prot="public" static="no">
        <type>typename <ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; double &gt;::<ref refid="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" kindref="member">Variant</ref></type>
        <definition>using space::orbit::EllipOrbit::Variant =  typename KeplerOrbit&lt;double&gt;::Variant</definition>
        <argsstring></argsstring>
        <name>Variant</name>
        <briefdescription>
<para>Variant that can hold both a Scalar OR a random indictor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="218" column="3" bodyfile="src/orbits/orbits.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" prot="public" static="no">
        <type>typename <ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; double &gt;::<ref refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" kindref="member">Scalar</ref></type>
        <definition>using space::orbit::EllipOrbit::Scalar =  typename KeplerOrbit&lt;double&gt;::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
<para>Floating point like type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="222" column="3" bodyfile="src/orbits/orbits.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structspace_1_1orbit_1_1_ellip_orbit_1ab77ad19df1ac7cb8e26e246ce2e09b0f" prot="public" static="no" mutable="no">
        <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" kindref="member">Scalar</ref></type>
        <definition>Scalar space::orbit::EllipOrbit::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Semi-major axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="244" column="10" bodyfile="src/orbits/orbits.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structspace_1_1orbit_1_1_ellip_orbit_1ab58805096fa2aafc74997be604712ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::EllipOrbit::EllipOrbit</definition>
        <argsstring>()=delete</argsstring>
        <name>EllipOrbit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="224" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_ellip_orbit_1ab9d33ee85367a3c90261e213dbb47082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::EllipOrbit::EllipOrbit</definition>
        <argsstring>(EllipOrbit const &amp;)=default</argsstring>
        <name>EllipOrbit</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit" kindref="compound">EllipOrbit</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="224" column="35"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_ellip_orbit_1a9ed6c9c5a94645c89da87739232b5c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::EllipOrbit::EllipOrbit</definition>
        <argsstring>(EllipOrbit &amp;&amp;)=default</argsstring>
        <name>EllipOrbit</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit" kindref="compound">EllipOrbit</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default move constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="224" column="67"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_ellip_orbit_1af133481d1551a0ebb39ef02a7fffe9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit" kindref="compound">EllipOrbit</ref> &amp;</type>
        <definition>EllipOrbit&amp; space::orbit::EllipOrbit::operator=</definition>
        <argsstring>(EllipOrbit const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit" kindref="compound">EllipOrbit</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy assignment operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="224" column="111"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_ellip_orbit_1a156dd3458fbe9a5febc13322743fa800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit" kindref="compound">EllipOrbit</ref> &amp;</type>
        <definition>EllipOrbit&amp; space::orbit::EllipOrbit::operator=</definition>
        <argsstring>(EllipOrbit &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit" kindref="compound">EllipOrbit</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default move assignment operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="224" column="154"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_ellip_orbit_1abba320c508905cbe02c47b78a0e3f6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::EllipOrbit::EllipOrbit</definition>
        <argsstring>(Scalar m_1, Scalar m_2, Scalar semi_major_axis, Scalar eccentricity, Variant inclination, Variant longitude_of_ascending_node, Variant argument_of_periapsis, Variant true_anomaly)</argsstring>
        <name>EllipOrbit</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" kindref="member">Scalar</ref></type>
          <declname>m_1</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" kindref="member">Scalar</ref></type>
          <declname>m_2</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" kindref="member">Scalar</ref></type>
          <declname>semi_major_axis</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" kindref="member">Scalar</ref></type>
          <declname>eccentricity</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" kindref="member">Variant</ref></type>
          <declname>inclination</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" kindref="member">Variant</ref></type>
          <declname>longitude_of_ascending_node</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" kindref="member">Variant</ref></type>
          <declname>argument_of_periapsis</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" kindref="member">Variant</ref></type>
          <declname>true_anomaly</declname>
        </param>
        <briefdescription>
<para>Construct a new Elliptical Orbit object from orbital parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m_1</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of the primary object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">m_2</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of the secondary object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">semi_major_axis</parametername>
</parameternamelist>
<parameterdescription>
<para>Semi-major axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">eccentricity</parametername>
</parameternamelist>
<parameterdescription>
<para>Eccentricity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Inclination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">longitude_of_ascending_node</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude of the ascending node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argument_of_periapsis</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument of periapsis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">true_anomaly</parametername>
</parameternamelist>
<parameterdescription>
<para>True anomaly. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="238" column="3" bodyfile="src/orbits/orbits.hpp" bodystart="443" bodyend="451"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Derived class of Kepler orbit. Elliptical orbit. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>space::orbit::EllipOrbit</label>
        <link refid="structspace_1_1orbit_1_1_ellip_orbit"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>space::orbit::KeplerOrbit&lt; double &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>space::orbit::KeplerOrbit&lt; Real &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Real</label>
      </node>
      <node id="1">
        <label>space::orbit::EllipOrbit</label>
        <link refid="structspace_1_1orbit_1_1_ellip_orbit"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>+a</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>space::orbit::KeplerOrbit&lt; double &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>space::orbit::KeplerOrbit&lt; Real &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
        <childnode refid="4" relation="usage">
          <edgelabel>+m1</edgelabel>
          <edgelabel>+p</edgelabel>
          <edgelabel>+m2</edgelabel>
          <edgelabel>+omega</edgelabel>
          <edgelabel>+Omega</edgelabel>
          <edgelabel>+e</edgelabel>
          <edgelabel>+i</edgelabel>
          <edgelabel>+nu</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/orbits/orbits.hpp" line="213" column="37" bodyfile="src/orbits/orbits.hpp" bodystart="213" bodyend="245"/>
    <listofallmembers>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1ab77ad19df1ac7cb8e26e246ce2e09b0f" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>a</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a26c061bf75786254584795af5bcd7315" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>e</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1ab58805096fa2aafc74997be604712ee8" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>EllipOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1ab9d33ee85367a3c90261e213dbb47082" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>EllipOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1a9ed6c9c5a94645c89da87739232b5c75" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>EllipOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1abba320c508905cbe02c47b78a0e3f6f0" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>EllipOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a1b7f88495c4c38f56d4d8c8c054a2be9" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>i</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a7a0dd45fb228845f5e7f4ce4bd1b5c30" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a0fa156f874494fccd91bc28d13cd890f" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a8a707a9cee707d407b5c0c07efdd937a" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1acc84219e953e1d849d5a1fdb95bd95f3" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a6bd820deefe5d0c09012e3fd36aea952" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>m1</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1acc8297d015fd61029bec16c31b677a6a" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>m2</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a9148410a05d72c34f6b7f561dfbdb4a9" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>nu</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1af07efe10f12bb60fc34030b407d7da2d" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>Omega</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a003a56ed520317c25f6ee50670aa1c2b" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>omega</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1af133481d1551a0ebb39ef02a7fffe9b8" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1a156dd3458fbe9a5febc13322743fa800" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a14a61d5c3113609af66b022f98d491c7" prot="public" virt="non-virtual" ambiguityscope="KeplerOrbit&lt; double &gt;::"><scope>space::orbit::EllipOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a26467916151fe158d1e027943b5cb08d" prot="public" virt="non-virtual" ambiguityscope="KeplerOrbit&lt; double &gt;::"><scope>space::orbit::EllipOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a0daca584f9a2643e05810accc8ea5446" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>orbit_type</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1ada8aad58f3afe02ccef9aac32904659e" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>p</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1aac90dd53e980016fa2468ca9ff91613d" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>Scalar</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a6b451e32b6f31ffd87b7ff6ce8034c83" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>shuffle_i</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a7b91e2ba1f156a8c5fba2c239c55d20d" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>shuffle_nu</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a89382d0eaf078c0f687cdfdae211dfb5" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>shuffle_omega</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a0d4c3c371062bbe3c34def9fd738467a" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>shuffle_Omega</name></member>
      <member refid="structspace_1_1orbit_1_1_ellip_orbit_1a6a9610f340983bb15f161018b16591cc" prot="public" virt="non-virtual"><scope>space::orbit::EllipOrbit</scope><name>Variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
