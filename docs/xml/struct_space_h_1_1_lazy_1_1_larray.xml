<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="struct_space_h_1_1_lazy_1_1_larray" kind="struct" language="C++" prot="public">
    <compoundname>SpaceH::Lazy::Larray</compoundname>
    <basecompoundref refid="struct_space_h_1_1_lazy_1_1_expr" prot="public" virt="non-virtual">SpaceH::Lazy::Expr&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</basecompoundref>
    <includes refid="lazy__array_8h" local="no">lazy_array.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>Len</declname>
        <defname>Len</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>IsSmall</declname>
        <defname>IsSmall</defname>
        <defval><ref refid="namespace_space_h_1_1_lazy_1a2e9fc8a531a641d52ae48dd739b15076" kindref="member">leq_cache_line</ref>&lt;T&gt;(Len)</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_space_h_1_1_lazy_1_1_larray_1a58b606df0deb55f1998a294840bed019" prot="public" static="no">
        <type>T</type>
        <definition>using SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="21" column="3" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_space_h_1_1_lazy_1_1_larray_1a66a634689f5def3552d6a9d328e39706" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; T[]&gt;</type>
        <definition>std::unique_ptr&lt;T[]&gt; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="104" column="19" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a955e552b224d90333d9b9cbe129edd8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::Larray</definition>
        <argsstring>()</argsstring>
        <name>Larray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="23" column="3" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a461ffe14903a59348166fe616b65a3f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::Larray</definition>
        <argsstring>(Larray &amp;&amp;src) noexcept</argsstring>
        <name>Larray</name>
        <param>
          <type><ref refid="struct_space_h_1_1_lazy_1_1_larray" kindref="compound">Larray</ref> &amp;&amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="25" column="3" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1ab758ebb88eee9506de28470f81f6032c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::Larray</definition>
        <argsstring>(const T(&amp;src)[S])</argsstring>
        <name>Larray</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>src</declname>
          <array>[S]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="28" column="3" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a933c457b0883aa1fcb639848616288dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::Larray</definition>
        <argsstring>(T arg, Args... args)</argsstring>
        <name>Larray</name>
        <param>
          <type>T</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="34" column="3" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a91df3ceed29fe1a5c46af747f17136d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::eval</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>eval</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="36" column="11" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a90352b271436cefe70f1751fe5721856" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="40" column="18" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a1bb157870d4e1e8cfd8e435766917457" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="42" column="12" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a7f0960c8fcb30c27d153b3b456bb0540" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="struct_space_h_1_1_lazy_1_1_larray" kindref="compound">Larray</ref> &amp;</type>
        <definition>Larray&amp; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::operator=</definition>
        <argsstring>(Larray &amp;&amp;src) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="struct_space_h_1_1_lazy_1_1_larray" kindref="compound">Larray</ref> &amp;&amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="44" column="10" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a317b164a3365d70b3c027d70a6472528" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_space_h_1_1_lazy_1_1_larray" kindref="compound">Larray</ref> &amp;</type>
        <definition>Larray&amp; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::operator=</definition>
        <argsstring>(const T &amp;scalar)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="50" column="10" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a02ba3884114d37d6d1a9e432f48966eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::Larray</definition>
        <argsstring>(const Expr&lt; U &gt; &amp;expr)</argsstring>
        <name>Larray</name>
        <param>
          <type>const <ref refid="struct_space_h_1_1_lazy_1_1_expr" kindref="compound">Expr</ref>&lt; U &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="53" column="3" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1acd1b91227afa2bb47207c0dab609105a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_space_h_1_1_lazy_1_1_larray" kindref="compound">Larray</ref> &amp;</type>
        <definition>Larray&amp; SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::operator=</definition>
        <argsstring>(const Expr&lt; U &gt; &amp;rhs_expr)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="struct_space_h_1_1_lazy_1_1_expr" kindref="compound">Expr</ref>&lt; U &gt; &amp;</type>
          <declname>rhs_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="61" column="10" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="61" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a37b99c87f4a42c148b8f27ee09625b0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="84" column="5" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="84" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1ae1815700419e72b0e99f4a38dd31e5eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="92" column="5" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a01ce8987c40d762c9bf9203e4c0a7710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::sort</definition>
        <argsstring>()</argsstring>
        <name>sort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="100" column="8" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1a4231d8c1259b3426d291aaefe5639567" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Begin__LINE__</declname>
            <defname>Begin__LINE__</defname>
          </param>
          <param>
            <type>int</type>
            <declname>End__LINE__</declname>
            <defname>End__LINE__</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Stride__LINE__</declname>
            <defname>Stride__LINE__</defname>
            <defval>1</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::operator[]</definition>
        <argsstring>(const Slice&lt; Begin__LINE__, End__LINE__, Stride__LINE__ &gt; &amp;slice) -&gt; Slice_Expr&lt; typename std::remove_reference&lt; decltype(*this)&gt;::type, Begin__LINE__, End__LINE__, Stride__LINE__, std::remove_reference&lt; decltype(*this)&gt;::type ::size()&gt;</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="struct_space_h_1_1_lazy_1_1_slice" kindref="compound">Slice</ref>&lt; Begin__LINE__, End__LINE__, Stride__LINE__ &gt; &amp;</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="102" column="52" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="102" bodyend="102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_space_h_1_1_lazy_1_1_larray_1ac1011d0f1f436dc1a25525f793027bbf" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lazy-evaluation/lazy_array.h" line="38" column="34" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="38" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SpaceH::Lazy::Expr&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SpaceH::Lazy::Expr&lt; Derived &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
      </node>
      <node id="1">
        <label>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_larray"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SpaceH::Lazy::Expr&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; Larray&lt; T, Len, IsSmall &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>SpaceH::Lazy::Expr&lt; Derived &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_expr"/>
      </node>
      <node id="1">
        <label>SpaceH::Lazy::Larray&lt; T, Len, IsSmall &gt;</label>
        <link refid="struct_space_h_1_1_lazy_1_1_larray"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/lazy-evaluation/lazy_array.h" line="19" column="29" bodyfile="src/lazy-evaluation/lazy_array.h" bodystart="19" bodyend="105"/>
    <listofallmembers>
      <member refid="struct_space_h_1_1_lazy_1_1_expr_1ada9ca100b1aa730e95c0ee6bf802d340" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>cast</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a66a634689f5def3552d6a9d328e39706" prot="private" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>data_</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a91df3ceed29fe1a5c46af747f17136d1" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>eval</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a955e552b224d90333d9b9cbe129edd8e" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>Larray</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a461ffe14903a59348166fe616b65a3f8" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>Larray</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1ab758ebb88eee9506de28470f81f6032c" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>Larray</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a933c457b0883aa1fcb639848616288dc" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>Larray</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a02ba3884114d37d6d1a9e432f48966eb" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>Larray</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a37b99c87f4a42c148b8f27ee09625b0f" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>max</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1ae1815700419e72b0e99f4a38dd31e5eb" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>min</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a7f0960c8fcb30c27d153b3b456bb0540" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>operator=</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a317b164a3365d70b3c027d70a6472528" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>operator=</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1acd1b91227afa2bb47207c0dab609105a" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>operator=</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a90352b271436cefe70f1751fe5721856" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>operator[]</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a1bb157870d4e1e8cfd8e435766917457" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>operator[]</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a4231d8c1259b3426d291aaefe5639567" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>operator[]</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1ac1011d0f1f436dc1a25525f793027bbf" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>size</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a01ce8987c40d762c9bf9203e4c0a7710" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>sort</name></member>
      <member refid="struct_space_h_1_1_lazy_1_1_larray_1a58b606df0deb55f1998a294840bed019" prot="public" virt="non-virtual"><scope>SpaceH::Lazy::Larray</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
