<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structspace_1_1orbit_1_1_hyper_orbit" kind="struct" language="C++" prot="public">
    <compoundname>space::orbit::HyperOrbit</compoundname>
    <basecompoundref refid="structspace_1_1orbit_1_1_kepler_orbit" prot="public" virt="non-virtual">space::orbit::KeplerOrbit&lt; double &gt;</basecompoundref>
    <includes refid="orbits_8hpp" local="no">orbits.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structspace_1_1orbit_1_1_hyper_orbit_1a2c670711bba4d34b9aefcee2bb0765b8" prot="public" static="no">
        <type>typename <ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; double &gt;::<ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a2c670711bba4d34b9aefcee2bb0765b8" kindref="member">Variant</ref></type>
        <definition>using space::orbit::HyperOrbit::Variant =  typename KeplerOrbit&lt;double&gt;::Variant</definition>
        <argsstring></argsstring>
        <name>Variant</name>
        <briefdescription>
<para>Variant that can hold both a Scalar OR a random indictor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="182" column="3" bodyfile="src/orbits/orbits.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" prot="public" static="no">
        <type>typename <ref refid="structspace_1_1orbit_1_1_kepler_orbit" kindref="compound">KeplerOrbit</ref>&lt; double &gt;::<ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" kindref="member">Scalar</ref></type>
        <definition>using space::orbit::HyperOrbit::Scalar =  typename KeplerOrbit&lt;double&gt;::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
<para>Floating point like type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="186" column="3" bodyfile="src/orbits/orbits.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structspace_1_1orbit_1_1_hyper_orbit_1a7a6cbd5c20e43cd5529e52b246e21472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::HyperOrbit::HyperOrbit</definition>
        <argsstring>()=delete</argsstring>
        <name>HyperOrbit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="188" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_hyper_orbit_1aa0093be27813ec5d234f152fa021cec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::HyperOrbit::HyperOrbit</definition>
        <argsstring>(HyperOrbit const &amp;)=default</argsstring>
        <name>HyperOrbit</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit" kindref="compound">HyperOrbit</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="188" column="35"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_hyper_orbit_1abef2980d0aa403bdecbd26236b546549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::HyperOrbit::HyperOrbit</definition>
        <argsstring>(HyperOrbit &amp;&amp;)=default</argsstring>
        <name>HyperOrbit</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit" kindref="compound">HyperOrbit</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default move constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="188" column="67"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_hyper_orbit_1a3fa273ebaf8a27367263422e62a27575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit" kindref="compound">HyperOrbit</ref> &amp;</type>
        <definition>HyperOrbit&amp; space::orbit::HyperOrbit::operator=</definition>
        <argsstring>(HyperOrbit const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit" kindref="compound">HyperOrbit</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy assignment operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="188" column="111"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_hyper_orbit_1a1706202d4c37e098876220f0e343c2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit" kindref="compound">HyperOrbit</ref> &amp;</type>
        <definition>HyperOrbit&amp; space::orbit::HyperOrbit::operator=</definition>
        <argsstring>(HyperOrbit &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit" kindref="compound">HyperOrbit</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default move assignment operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="188" column="154"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1orbit_1_1_hyper_orbit_1a6cd78b04a0cd94f825ccef6a47b4f835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::orbit::HyperOrbit::HyperOrbit</definition>
        <argsstring>(Scalar m_1, Scalar m_2, Scalar v_inf, Scalar b, Variant inclination, Variant longitude_of_ascending_node, Variant argument_of_periapsis, Scalar r, Hyper in_out=Hyper::in)</argsstring>
        <name>HyperOrbit</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" kindref="member">Scalar</ref></type>
          <declname>m_1</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" kindref="member">Scalar</ref></type>
          <declname>m_2</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" kindref="member">Scalar</ref></type>
          <declname>v_inf</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" kindref="member">Scalar</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a2c670711bba4d34b9aefcee2bb0765b8" kindref="member">Variant</ref></type>
          <declname>inclination</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a2c670711bba4d34b9aefcee2bb0765b8" kindref="member">Variant</ref></type>
          <declname>longitude_of_ascending_node</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a2c670711bba4d34b9aefcee2bb0765b8" kindref="member">Variant</ref></type>
          <declname>argument_of_periapsis</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" kindref="member">Scalar</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacespace_1_1orbit_1a6d5f1fbb31b8dcdf0aa2ae8f83dfc5a1" kindref="member">Hyper</ref></type>
          <declname>in_out</declname>
          <defval><ref refid="namespacespace_1_1orbit_1a6d5f1fbb31b8dcdf0aa2ae8f83dfc5a1a13b5bfe96f3e2fe411c9f66f4a582adf" kindref="member">Hyper::in</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new Hyper Orbit object from scattering parameter b:impact parameter, v_inf:velocity at infinity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m_1</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of the primary object: Stayed object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">m_2</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass of the secondary object: incident object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">v_inf</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity at infinity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Impact parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inclination</parametername>
</parameternamelist>
<parameterdescription>
<para>Orbit inclination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">longitude_of_ascending_node</parametername>
</parameternamelist>
<parameterdescription>
<para>Longitude of the ascending node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argument_of_periapsis</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument of the periapsis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">r</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance between the two objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicator of incident in or ejected out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/orbits/orbits.hpp" line="203" column="3" bodyfile="src/orbits/orbits.hpp" bodystart="429" bodyend="441"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Derived class of Kepler orbit. Hyperbolic orbit. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>space::orbit::HyperOrbit</label>
        <link refid="structspace_1_1orbit_1_1_hyper_orbit"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>space::orbit::KeplerOrbit&lt; double &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>space::orbit::KeplerOrbit&lt; Real &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Real</label>
      </node>
      <node id="1">
        <label>space::orbit::HyperOrbit</label>
        <link refid="structspace_1_1orbit_1_1_hyper_orbit"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>space::orbit::KeplerOrbit&lt; double &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>space::orbit::KeplerOrbit&lt; Real &gt;</label>
        <link refid="structspace_1_1orbit_1_1_kepler_orbit"/>
        <childnode refid="4" relation="usage">
          <edgelabel>+m1</edgelabel>
          <edgelabel>+p</edgelabel>
          <edgelabel>+m2</edgelabel>
          <edgelabel>+omega</edgelabel>
          <edgelabel>+Omega</edgelabel>
          <edgelabel>+e</edgelabel>
          <edgelabel>+i</edgelabel>
          <edgelabel>+nu</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/orbits/orbits.hpp" line="177" column="37" bodyfile="src/orbits/orbits.hpp" bodystart="177" bodyend="205"/>
    <listofallmembers>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a26c061bf75786254584795af5bcd7315" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>e</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1a7a6cbd5c20e43cd5529e52b246e21472" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>HyperOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1aa0093be27813ec5d234f152fa021cec2" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>HyperOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1abef2980d0aa403bdecbd26236b546549" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>HyperOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1a6cd78b04a0cd94f825ccef6a47b4f835" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>HyperOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a1b7f88495c4c38f56d4d8c8c054a2be9" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>i</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a7a0dd45fb228845f5e7f4ce4bd1b5c30" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a0fa156f874494fccd91bc28d13cd890f" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a8a707a9cee707d407b5c0c07efdd937a" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1acc84219e953e1d849d5a1fdb95bd95f3" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>KeplerOrbit</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a6bd820deefe5d0c09012e3fd36aea952" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>m1</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1acc8297d015fd61029bec16c31b677a6a" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>m2</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a9148410a05d72c34f6b7f561dfbdb4a9" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>nu</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1af07efe10f12bb60fc34030b407d7da2d" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>Omega</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a003a56ed520317c25f6ee50670aa1c2b" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>omega</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1a3fa273ebaf8a27367263422e62a27575" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1a1706202d4c37e098876220f0e343c2de" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a14a61d5c3113609af66b022f98d491c7" prot="public" virt="non-virtual" ambiguityscope="KeplerOrbit&lt; double &gt;::"><scope>space::orbit::HyperOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a26467916151fe158d1e027943b5cb08d" prot="public" virt="non-virtual" ambiguityscope="KeplerOrbit&lt; double &gt;::"><scope>space::orbit::HyperOrbit</scope><name>operator=</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a0daca584f9a2643e05810accc8ea5446" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>orbit_type</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1ada8aad58f3afe02ccef9aac32904659e" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>p</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1a758cde91e1c6ec28eb2d6f2ffe36501e" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>Scalar</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a6b451e32b6f31ffd87b7ff6ce8034c83" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>shuffle_i</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a7b91e2ba1f156a8c5fba2c239c55d20d" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>shuffle_nu</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a0d4c3c371062bbe3c34def9fd738467a" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>shuffle_Omega</name></member>
      <member refid="structspace_1_1orbit_1_1_kepler_orbit_1a89382d0eaf078c0f687cdfdae211dfb5" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>shuffle_omega</name></member>
      <member refid="structspace_1_1orbit_1_1_hyper_orbit_1a2c670711bba4d34b9aefcee2bb0765b8" prot="public" virt="non-virtual"><scope>space::orbit::HyperOrbit</scope><name>Variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
