<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespacespace_1_1math" kind="namespace" language="C++">
    <compoundname>space::math</compoundname>
    <innerclass refid="structspace_1_1math_1_1big__value" prot="public">space::math::big_value</innerclass>
    <innerclass refid="structspace_1_1math_1_1epsilon" prot="public">space::math::epsilon</innerclass>
    <innerclass refid="structspace_1_1math_1_1max__value" prot="public">space::math::max_value</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacespace_1_1math_1aadb8ce07f6570c17ea728b3eba3a573c" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T space::math::epsilon_v</definition>
        <argsstring></argsstring>
        <name>epsilon_v</name>
        <initializer>= <ref refid="structspace_1_1math_1_1epsilon" kindref="compound">epsilon</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="93" column="13" bodyfile="src/math.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacespace_1_1math_1ade32ddc299725340edc41bd8a5554b48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>T2</type>
        <definition>T2 space::math::min</definition>
        <argsstring>(T1 const &amp;x, T2 const &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Self <ref refid="namespacespace_1_1math_1ade32ddc299725340edc41bd8a5554b48" kindref="member">min()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="38" column="11" bodyfile="src/math.hpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a686a9c355dd46e87db74bef0fc4d8533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>T2</type>
        <definition>T2 space::math::max</definition>
        <argsstring>(T1 const &amp;x, T2 const &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>T1 const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Self <ref refid="namespacespace_1_1math_1a686a9c355dd46e87db74bef0fc4d8533" kindref="member">max()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="44" column="11" bodyfile="src/math.hpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1afe694aee30694bec4b28ddab7a8bb8a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T space::math::abs</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>abs</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Self <ref refid="namespacespace_1_1math_1afe694aee30694bec4b28ddab7a8bb8a3" kindref="member">abs()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="50" column="10" bodyfile="src/math.hpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a3f8b417d5de6b36412ddb5d48e673060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T space::math::in_range</definition>
        <argsstring>(T low, T x, T high)</argsstring>
        <name>in_range</name>
        <param>
          <type>T</type>
          <declname>low</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="55" column="10" bodyfile="src/math.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a4fa19c3b7ed5589fc8999e67bb48f3f1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T space::math::step</definition>
        <argsstring>(T x)</argsstring>
        <name>step</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="67" column="20" bodyfile="src/math.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a154d03c4d37ea8ed198a6c0b9d0309a5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T space::math::sign</definition>
        <argsstring>(T x)</argsstring>
        <name>sign</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="78" column="20" bodyfile="src/math.hpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a53f8a8c104780e093980418c7f306c24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool space::math::iseq</definition>
        <argsstring>(T x, T y)</argsstring>
        <name>iseq</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="96" column="13" bodyfile="src/math.hpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a3042c5950168be2400810fabdc5a7221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T space::math::karmack_fast_inverse_square_root</definition>
        <argsstring>(T x)</argsstring>
        <name>karmack_fast_inverse_square_root</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="121" column="10" bodyfile="src/math.hpp" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1ad9a87717de1b1d085aa1fa84303b14fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float space::math::karmack_fast_inverse_square_root&lt; float &gt;</definition>
        <argsstring>(float x)</argsstring>
        <name>karmack_fast_inverse_square_root&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="126" column="8" bodyfile="src/math.hpp" bodystart="126" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a2c1c94cff2908e6c71bd08e7d48f5edf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double space::math::karmack_fast_inverse_square_root&lt; double &gt;</definition>
        <argsstring>(double x)</argsstring>
        <name>karmack_fast_inverse_square_root&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="138" column="8" bodyfile="src/math.hpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a03a25b4b64e102b98c156fbf1cf547f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fun</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::math::root_bisection</definition>
        <argsstring>(Fun f, decltype(f(0)) low, decltype(f(0)) high) -&gt; decltype(f(0))</argsstring>
        <name>root_bisection</name>
        <param>
          <type>Fun</type>
          <declname>f</declname>
        </param>
        <param>
          <type>decltype(f(0))</type>
          <declname>low</declname>
        </param>
        <param>
          <type>decltype(f(0))</type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Fun</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="155" column="6" bodyfile="src/math.hpp" bodystart="155" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1math_1a68a1a4504386aaf26253722a5af2627e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fun</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; Fun &gt;()(0))</type>
        <definition>decltype(std::declval&lt;Fun&gt;()(0)) space::math::root_newton</definition>
        <argsstring>(Fun f)</argsstring>
        <name>root_newton</name>
        <param>
          <type>Fun</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math.hpp" line="169" column="10" bodyfile="src/math.hpp" bodystart="169" bodyend="183"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>namespace for math </para>
    </detaileddescription>
    <location file="src/math.hpp" line="31" column="1"/>
  </compounddef>
</doxygen>
